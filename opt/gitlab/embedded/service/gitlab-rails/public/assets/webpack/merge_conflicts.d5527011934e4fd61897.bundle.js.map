{"version":3,"sources":["webpack:///merge_conflicts.d5527011934e4fd61897.bundle.js","webpack:///./merge_conflicts/mixins/line_conflict_actions.js","webpack:///./merge_conflicts/components/inline_conflict_lines.js","webpack:///./merge_conflicts/merge_conflict_service.js","webpack:///./merge_conflicts/components/diff_file_editor.js","webpack:///./merge_conflicts/merge_conflict_store.js","webpack:///./merge_conflicts/merge_conflicts_bundle.js","webpack:///./merge_conflicts/components/parallel_conflict_lines.js","webpack:///./merge_conflicts/mixins/line_conflict_utils.js"],"names":["webpackJsonp","5AFF","module","exports","global","mergeConflicts","actions","methods","handleSelected","file","sectionId","selection","gl","mergeConflictsStore","window","6wRZ","inlineConflictLines","Vue","extend","props","Object","mixins","utils","7+Qt","__webpack_require__","$","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","mergeConflictsService","options","this","conflictsPath","resolveConflictsPath","value","ajax","dataType","url","data","JSON","stringify","contentType","method","call","TbQ9","_defineProperty","obj","diffFileEditor","onCancelDiscardConfirmation","Function","onAcceptDiscardConfirmation","saved","loading","fileLoaded","originalContent","computed","classObject","is-loading","watch","val","resetEditorContent","loadEditor","mounted","_this","get","content_path","done","content","$el","querySelector","fileContent","document","createTextNode","textContent","editor","ace","edit","$blockScrolling","Infinity","getSession","setMode","blob_ace_mode","on","saveDiffResolution","fail","Flash","always","getValue","resolveEditChanged","promptDiscardConfirmation","setValue","cancelDiscardConfirmation","acceptDiscardConfirmation","WMxC","diffViewType","Cookies","HEAD_HEADER_TEXT","ORIGIN_HEADER_TEXT","HEAD_BUTTON_TITLE","ORIGIN_BUTTON_TITLE","INTERACTIVE_RESOLVE_MODE","EDIT_RESOLVE_MODE","DEFAULT_RESOLVE_MODE","VIEW_TYPES","INLINE","PARALLEL","CONFLICT_TYPES","TEXT","TEXT_EDITOR","state","isLoading","hasError","isSubmitting","isParallel","conflictsData","setConflictsData","decorateFiles","files","commitMessage","commit_message","sourceBranch","source_branch","targetBranch","target_branch","shortCommitSha","commit_sha","slice","forEach","resolutionData","resolveMode","filePath","getFilePath","iconClass","blob_icon","blobPath","blob_path","type","showEditor","setInlineLine","setParallelLine","_this2","inlineLines","sections","section","currentLineType","conflict","lines","id","push","getHeadHeaderLine","line","lineType","richText","decorateLineForInlineView","getOriginHeaderLine","_this3","parallelLines","linesObj","left","right","getLineForParallelView","checkLineLengths","len","setLoadingState","setErrorState","setFailedRequest","message","errorMessage","getConflictsCount","count","getConflictsCountText","text","setViewType","viewType","diffView","set","buttonTitle","isHeader","isHead","isSelected","isUnselected","hasConflict","isOrigin","hasMatch","rich_text","old_line","new_line","lineNumber","old_path","new_path","diff","setPromptConfirmationState","setFileResolveMode","mode","restoreFileLinesState","isLeftMatch","isRightMatch","isReadyToCommit","hasCommitMessage","trim","unresolved","l","numberConflicts","resolvedConflicts","keys","j","k","getCommitButtonText","initial","inProgress","getCommitData","commitData","addFile","_this4","markLine","hasSameId","setSubmitState","fileTextTypePresent","some","f","dIvF","conflictsEl","dataset","MergeConflictsResolverApp","el","components","diff-file-editor","inline-conflict-lines","parallel-conflict-lines","parallelConflictLines","conflictsCountText","readyToCommit","commitButtonText","showDiffViewTypeSwitcher","created","fetchConflictsData","error","$nextTick","syntaxHighlight","handleViewTypeChange","onClickResolveModeButton","commit","submitResolveConflicts","location","href","redirect_to","yEia","template","zALn","lineCssClass","head","origin","match","selected","unselected"],"mappings":"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","file":"merge_conflicts.d5527011934e4fd61897.bundle.js","sourcesContent":["webpackJsonp([9,25,26],{\n\n/***/ \"5AFF\":\n/***/ (function(module, exports) {\n\n/* eslint-disable no-param-reassign, comma-dangle */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.actions = {\n    methods: {\n      handleSelected: function handleSelected(file, sectionId, selection) {\n        gl.mergeConflicts.mergeConflictsStore.handleSelected(file, sectionId, selection);\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ \"6wRZ\":\n/***/ (function(module, exports) {\n\n/* eslint-disable no-param-reassign, comma-dangle */\n/* global Vue */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.inlineConflictLines = Vue.extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions]\n  });\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ \"7+Qt\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-param-reassign, comma-dangle */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  var mergeConflictsService = function () {\n    function mergeConflictsService(options) {\n      _classCallCheck(this, mergeConflictsService);\n\n      this.conflictsPath = options.conflictsPath;\n      this.resolveConflictsPath = options.resolveConflictsPath;\n    }\n\n    _createClass(mergeConflictsService, [{\n      key: 'fetchConflictsData',\n      value: function fetchConflictsData() {\n        return $.ajax({\n          dataType: 'json',\n          url: this.conflictsPath\n        });\n      }\n    }, {\n      key: 'submitResolveConflicts',\n      value: function submitResolveConflicts(data) {\n        return $.ajax({\n          url: this.resolveConflictsPath,\n          data: JSON.stringify(data),\n          contentType: 'application/json',\n          dataType: 'json',\n          method: 'POST'\n        });\n      }\n    }]);\n\n    return mergeConflictsService;\n  }();\n\n  global.mergeConflicts.mergeConflictsService = mergeConflictsService;\n})(window.gl || (window.gl = {}));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"TbQ9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable comma-dangle, quote-props, no-useless-computed-key, object-shorthand, no-new, no-param-reassign, max-len */\n/* global Vue */\n/* global ace */\n/* global Flash */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.diffFileEditor = Vue.extend({\n    props: {\n      file: Object,\n      onCancelDiscardConfirmation: Function,\n      onAcceptDiscardConfirmation: Function\n    },\n    data: function data() {\n      return {\n        saved: false,\n        loading: false,\n        fileLoaded: false,\n        originalContent: ''\n      };\n    },\n\n    computed: {\n      classObject: function classObject() {\n        return {\n          'saved': this.saved,\n          'is-loading': this.loading\n        };\n      }\n    },\n    watch: _defineProperty({}, 'file.showEditor', function fileShowEditor(val) {\n      this.resetEditorContent();\n\n      if (!val || this.fileLoaded || this.loading) {\n        return;\n      }\n\n      this.loadEditor();\n    }),\n    mounted: function mounted() {\n      if (this.file.loadEditor) {\n        this.loadEditor();\n      }\n    },\n\n    methods: {\n      loadEditor: function loadEditor() {\n        var _this = this;\n\n        this.loading = true;\n\n        $.get(this.file.content_path).done(function (file) {\n          var content = _this.$el.querySelector('pre');\n          var fileContent = document.createTextNode(file.content);\n\n          content.textContent = fileContent.textContent;\n\n          _this.originalContent = file.content;\n          _this.fileLoaded = true;\n          _this.editor = ace.edit(content);\n          _this.editor.$blockScrolling = Infinity; // Turn off annoying warning\n          _this.editor.getSession().setMode('ace/mode/' + file.blob_ace_mode);\n          _this.editor.on('change', function () {\n            _this.saveDiffResolution();\n          });\n          _this.saveDiffResolution();\n        }).fail(function () {\n          new Flash('Failed to load the file, please try again.');\n        }).always(function () {\n          _this.loading = false;\n        });\n      },\n      saveDiffResolution: function saveDiffResolution() {\n        this.saved = true;\n\n        // This probably be better placed in the data provider\n        this.file.content = this.editor.getValue();\n        this.file.resolveEditChanged = this.file.content !== this.originalContent;\n        this.file.promptDiscardConfirmation = false;\n      },\n      resetEditorContent: function resetEditorContent() {\n        if (this.fileLoaded) {\n          this.editor.setValue(this.originalContent, -1);\n        }\n      },\n      cancelDiscardConfirmation: function cancelDiscardConfirmation(file) {\n        this.onCancelDiscardConfirmation(file);\n      },\n      acceptDiscardConfirmation: function acceptDiscardConfirmation(file) {\n        this.onAcceptDiscardConfirmation(file);\n      }\n    }\n  });\n})(window.gl || (window.gl = {}));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"WMxC\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {/* eslint-disable comma-dangle, object-shorthand, no-param-reassign, camelcase, no-nested-ternary, no-continue, max-len */\n/* global Cookies */\n/* global Vue */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  var diffViewType = Cookies.get('diff_view');\n  var HEAD_HEADER_TEXT = 'HEAD//our changes';\n  var ORIGIN_HEADER_TEXT = 'origin//their changes';\n  var HEAD_BUTTON_TITLE = 'Use ours';\n  var ORIGIN_BUTTON_TITLE = 'Use theirs';\n  var INTERACTIVE_RESOLVE_MODE = 'interactive';\n  var EDIT_RESOLVE_MODE = 'edit';\n  var DEFAULT_RESOLVE_MODE = INTERACTIVE_RESOLVE_MODE;\n  var VIEW_TYPES = {\n    INLINE: 'inline',\n    PARALLEL: 'parallel'\n  };\n  var CONFLICT_TYPES = {\n    TEXT: 'text',\n    TEXT_EDITOR: 'text-editor'\n  };\n\n  global.mergeConflicts.mergeConflictsStore = {\n    state: {\n      isLoading: true,\n      hasError: false,\n      isSubmitting: false,\n      isParallel: diffViewType === VIEW_TYPES.PARALLEL,\n      diffViewType: diffViewType,\n      conflictsData: {}\n    },\n\n    setConflictsData: function setConflictsData(data) {\n      this.decorateFiles(data.files);\n\n      this.state.conflictsData = {\n        files: data.files,\n        commitMessage: data.commit_message,\n        sourceBranch: data.source_branch,\n        targetBranch: data.target_branch,\n        shortCommitSha: data.commit_sha.slice(0, 7)\n      };\n    },\n    decorateFiles: function decorateFiles(files) {\n      var _this = this;\n\n      files.forEach(function (file) {\n        file.content = '';\n        file.resolutionData = {};\n        file.promptDiscardConfirmation = false;\n        file.resolveMode = DEFAULT_RESOLVE_MODE;\n        file.filePath = _this.getFilePath(file);\n        file.iconClass = 'fa-' + file.blob_icon;\n        file.blobPath = file.blob_path;\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.showEditor = false;\n          file.loadEditor = false;\n\n          _this.setInlineLine(file);\n          _this.setParallelLine(file);\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          file.showEditor = true;\n          file.loadEditor = true;\n        }\n      });\n    },\n    setInlineLine: function setInlineLine(file) {\n      var _this2 = this;\n\n      file.inlineLines = [];\n\n      file.sections.forEach(function (section) {\n        var currentLineType = 'new';\n        var conflict = section.conflict,\n            lines = section.lines,\n            id = section.id;\n\n\n        if (conflict) {\n          file.inlineLines.push(_this2.getHeadHeaderLine(id));\n        }\n\n        lines.forEach(function (line) {\n          var type = line.type;\n\n\n          if ((type === 'new' || type === 'old') && currentLineType !== type) {\n            currentLineType = type;\n            file.inlineLines.push({ lineType: 'emptyLine', richText: '' });\n          }\n\n          _this2.decorateLineForInlineView(line, id, conflict);\n          file.inlineLines.push(line);\n        });\n\n        if (conflict) {\n          file.inlineLines.push(_this2.getOriginHeaderLine(id));\n        }\n      });\n    },\n    setParallelLine: function setParallelLine(file) {\n      var _this3 = this;\n\n      file.parallelLines = [];\n      var linesObj = { left: [], right: [] };\n\n      file.sections.forEach(function (section) {\n        var conflict = section.conflict,\n            lines = section.lines,\n            id = section.id;\n\n\n        if (conflict) {\n          linesObj.left.push(_this3.getOriginHeaderLine(id));\n          linesObj.right.push(_this3.getHeadHeaderLine(id));\n        }\n\n        lines.forEach(function (line) {\n          var type = line.type;\n\n\n          if (conflict) {\n            if (type === 'old') {\n              linesObj.left.push(_this3.getLineForParallelView(line, id, 'conflict'));\n            } else if (type === 'new') {\n              linesObj.right.push(_this3.getLineForParallelView(line, id, 'conflict', true));\n            }\n          } else {\n            var lineType = type || 'context';\n\n            linesObj.left.push(_this3.getLineForParallelView(line, id, lineType));\n            linesObj.right.push(_this3.getLineForParallelView(line, id, lineType, true));\n          }\n        });\n\n        _this3.checkLineLengths(linesObj);\n      });\n\n      for (var i = 0, len = linesObj.left.length; i < len; i += 1) {\n        file.parallelLines.push([linesObj.right[i], linesObj.left[i]]);\n      }\n    },\n    setLoadingState: function setLoadingState(state) {\n      this.state.isLoading = state;\n    },\n    setErrorState: function setErrorState(state) {\n      this.state.hasError = state;\n    },\n    setFailedRequest: function setFailedRequest(message) {\n      this.state.hasError = true;\n      this.state.conflictsData.errorMessage = message;\n    },\n    getConflictsCount: function getConflictsCount() {\n      if (!this.state.conflictsData.files.length) {\n        return 0;\n      }\n\n      var files = this.state.conflictsData.files;\n      var count = 0;\n\n      files.forEach(function (file) {\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.sections.forEach(function (section) {\n            if (section.conflict) {\n              count += 1;\n            }\n          });\n        } else {\n          count += 1;\n        }\n      });\n\n      return count;\n    },\n    getConflictsCountText: function getConflictsCountText() {\n      var count = this.getConflictsCount();\n      var text = count ? 'conflicts' : 'conflict';\n\n      return count + ' ' + text;\n    },\n    setViewType: function setViewType(viewType) {\n      this.state.diffView = viewType;\n      this.state.isParallel = viewType === VIEW_TYPES.PARALLEL;\n\n      Cookies.set('diff_view', viewType);\n    },\n    getHeadHeaderLine: function getHeadHeaderLine(id) {\n      return {\n        id: id,\n        richText: HEAD_HEADER_TEXT,\n        buttonTitle: HEAD_BUTTON_TITLE,\n        type: 'new',\n        section: 'head',\n        isHeader: true,\n        isHead: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n    decorateLineForInlineView: function decorateLineForInlineView(line, id, conflict) {\n      var type = line.type;\n\n      line.id = id;\n      line.hasConflict = conflict;\n      line.isHead = type === 'new';\n      line.isOrigin = type === 'old';\n      line.hasMatch = type === 'match';\n      line.richText = line.rich_text;\n      line.isSelected = false;\n      line.isUnselected = false;\n    },\n    getLineForParallelView: function getLineForParallelView(line, id, lineType, isHead) {\n      var old_line = line.old_line,\n          new_line = line.new_line,\n          rich_text = line.rich_text;\n\n      var hasConflict = lineType === 'conflict';\n\n      return {\n        id: id,\n        lineType: lineType,\n        hasConflict: hasConflict,\n        isHead: hasConflict && isHead,\n        isOrigin: hasConflict && !isHead,\n        hasMatch: lineType === 'match',\n        lineNumber: isHead ? new_line : old_line,\n        section: isHead ? 'head' : 'origin',\n        richText: rich_text,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n    getOriginHeaderLine: function getOriginHeaderLine(id) {\n      return {\n        id: id,\n        richText: ORIGIN_HEADER_TEXT,\n        buttonTitle: ORIGIN_BUTTON_TITLE,\n        type: 'old',\n        section: 'origin',\n        isHeader: true,\n        isOrigin: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n    getFilePath: function getFilePath(file) {\n      var old_path = file.old_path,\n          new_path = file.new_path;\n\n      return old_path === new_path ? new_path : old_path + ' \\u2192 ' + new_path;\n    },\n    checkLineLengths: function checkLineLengths(linesObj) {\n      var left = linesObj.left,\n          right = linesObj.right;\n\n\n      if (left.length !== right.length) {\n        if (left.length > right.length) {\n          var diff = left.length - right.length;\n          for (var i = 0; i < diff; i += 1) {\n            right.push({ lineType: 'emptyLine', richText: '' });\n          }\n        } else {\n          var _diff = right.length - left.length;\n          for (var _i = 0; _i < _diff; _i += 1) {\n            left.push({ lineType: 'emptyLine', richText: '' });\n          }\n        }\n      }\n    },\n    setPromptConfirmationState: function setPromptConfirmationState(file, state) {\n      file.promptDiscardConfirmation = state;\n    },\n    setFileResolveMode: function setFileResolveMode(file, mode) {\n      if (mode === INTERACTIVE_RESOLVE_MODE) {\n        file.showEditor = false;\n      } else if (mode === EDIT_RESOLVE_MODE) {\n        // Restore Interactive mode when switching to Edit mode\n        file.showEditor = true;\n        file.loadEditor = true;\n        file.resolutionData = {};\n\n        this.restoreFileLinesState(file);\n      }\n\n      file.resolveMode = mode;\n    },\n    restoreFileLinesState: function restoreFileLinesState(file) {\n      file.inlineLines.forEach(function (line) {\n        if (line.hasConflict || line.isHeader) {\n          line.isSelected = false;\n          line.isUnselected = false;\n        }\n      });\n\n      file.parallelLines.forEach(function (lines) {\n        var left = lines[0];\n        var right = lines[1];\n        var isLeftMatch = left.hasConflict || left.isHeader;\n        var isRightMatch = right.hasConflict || right.isHeader;\n\n        if (isLeftMatch || isRightMatch) {\n          left.isSelected = false;\n          left.isUnselected = false;\n          right.isSelected = false;\n          right.isUnselected = false;\n        }\n      });\n    },\n    isReadyToCommit: function isReadyToCommit() {\n      var files = this.state.conflictsData.files;\n      var hasCommitMessage = $.trim(this.state.conflictsData.commitMessage).length;\n      var unresolved = 0;\n\n      for (var i = 0, l = files.length; i < l; i += 1) {\n        var file = files[i];\n\n        if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n          var numberConflicts = 0;\n          var resolvedConflicts = Object.keys(file.resolutionData).length;\n\n          // We only check for conflicts type 'text'\n          // since conflicts `text_editor` can´t be resolved in interactive mode\n          if (file.type === CONFLICT_TYPES.TEXT) {\n            for (var j = 0, k = file.sections.length; j < k; j += 1) {\n              if (file.sections[j].conflict) {\n                numberConflicts += 1;\n              }\n            }\n\n            if (resolvedConflicts !== numberConflicts) {\n              unresolved += 1;\n            }\n          }\n        } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n          // Unlikely to happen since switching to Edit mode saves content automatically.\n          // Checking anyway in case the save strategy changes in the future\n          if (!file.content) {\n            unresolved += 1;\n            continue;\n          }\n        }\n      }\n\n      return !this.state.isSubmitting && hasCommitMessage && !unresolved;\n    },\n    getCommitButtonText: function getCommitButtonText() {\n      var initial = 'Commit conflict resolution';\n      var inProgress = 'Committing...';\n\n      return this.state ? this.state.isSubmitting ? inProgress : initial : initial;\n    },\n    getCommitData: function getCommitData() {\n      var commitData = {};\n\n      commitData = {\n        commit_message: this.state.conflictsData.commitMessage,\n        files: []\n      };\n\n      this.state.conflictsData.files.forEach(function (file) {\n        var addFile = {\n          old_path: file.old_path,\n          new_path: file.new_path\n        };\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          // Submit only one data for type of editing\n          if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n            addFile.sections = file.resolutionData;\n          } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n            addFile.content = file.content;\n          }\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          addFile.content = file.content;\n        }\n\n        commitData.files.push(addFile);\n      });\n\n      return commitData;\n    },\n    handleSelected: function handleSelected(file, sectionId, selection) {\n      var _this4 = this;\n\n      Vue.set(file.resolutionData, sectionId, selection);\n\n      file.inlineLines.forEach(function (line) {\n        if (line.id === sectionId && (line.hasConflict || line.isHeader)) {\n          _this4.markLine(line, selection);\n        }\n      });\n\n      file.parallelLines.forEach(function (lines) {\n        var left = lines[0];\n        var right = lines[1];\n        var hasSameId = right.id === sectionId || left.id === sectionId;\n        var isLeftMatch = left.hasConflict || left.isHeader;\n        var isRightMatch = right.hasConflict || right.isHeader;\n\n        if (hasSameId && (isLeftMatch || isRightMatch)) {\n          _this4.markLine(left, selection);\n          _this4.markLine(right, selection);\n        }\n      });\n    },\n    markLine: function markLine(line, selection) {\n      if (selection === 'head' && line.isHead) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else if (selection === 'origin' && line.isOrigin) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else {\n        line.isSelected = false;\n        line.isUnselected = true;\n      }\n    },\n    setSubmitState: function setSubmitState(state) {\n      this.state.isSubmitting = state;\n    },\n    fileTextTypePresent: function fileTextTypePresent() {\n      return this.state.conflictsData.files.some(function (f) {\n        return f.type === CONFLICT_TYPES.TEXT;\n      });\n    }\n  };\n})(window.gl || (window.gl = {}));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"dIvF\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {/* eslint-disable new-cap, comma-dangle, no-new */\n/* global Vue */\n/* global Flash */\n\nwindow.Vue = __webpack_require__(\"Eruj\");\n__webpack_require__(\"WMxC\");\n__webpack_require__(\"7+Qt\");\n__webpack_require__(\"zALn\");\n__webpack_require__(\"5AFF\");\n__webpack_require__(\"TbQ9\");\n__webpack_require__(\"6wRZ\");\n__webpack_require__(\"yEia\");\n\n$(function () {\n  var INTERACTIVE_RESOLVE_MODE = 'interactive';\n  var conflictsEl = document.querySelector('#conflicts');\n  var mergeConflictsStore = gl.mergeConflicts.mergeConflictsStore;\n  var mergeConflictsService = new gl.mergeConflicts.mergeConflictsService({\n    conflictsPath: conflictsEl.dataset.conflictsPath,\n    resolveConflictsPath: conflictsEl.dataset.resolveConflictsPath\n  });\n\n  gl.MergeConflictsResolverApp = new Vue({\n    el: '#conflicts',\n    data: mergeConflictsStore.state,\n    components: {\n      'diff-file-editor': gl.mergeConflicts.diffFileEditor,\n      'inline-conflict-lines': gl.mergeConflicts.inlineConflictLines,\n      'parallel-conflict-lines': gl.mergeConflicts.parallelConflictLines\n    },\n    computed: {\n      conflictsCountText: function conflictsCountText() {\n        return mergeConflictsStore.getConflictsCountText();\n      },\n      readyToCommit: function readyToCommit() {\n        return mergeConflictsStore.isReadyToCommit();\n      },\n      commitButtonText: function commitButtonText() {\n        return mergeConflictsStore.getCommitButtonText();\n      },\n      showDiffViewTypeSwitcher: function showDiffViewTypeSwitcher() {\n        return mergeConflictsStore.fileTextTypePresent();\n      }\n    },\n    created: function created() {\n      var _this = this;\n\n      mergeConflictsService.fetchConflictsData().done(function (data) {\n        if (data.type === 'error') {\n          mergeConflictsStore.setFailedRequest(data.message);\n        } else {\n          mergeConflictsStore.setConflictsData(data);\n        }\n      }).error(function () {\n        mergeConflictsStore.setFailedRequest();\n      }).always(function () {\n        mergeConflictsStore.setLoadingState(false);\n\n        _this.$nextTick(function () {\n          $('.js-syntax-highlight').syntaxHighlight();\n        });\n      });\n    },\n\n    methods: {\n      handleViewTypeChange: function handleViewTypeChange(viewType) {\n        mergeConflictsStore.setViewType(viewType);\n      },\n      onClickResolveModeButton: function onClickResolveModeButton(file, mode) {\n        if (mode === INTERACTIVE_RESOLVE_MODE && file.resolveEditChanged) {\n          mergeConflictsStore.setPromptConfirmationState(file, true);\n          return;\n        }\n\n        mergeConflictsStore.setFileResolveMode(file, mode);\n      },\n      acceptDiscardConfirmation: function acceptDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n        mergeConflictsStore.setFileResolveMode(file, INTERACTIVE_RESOLVE_MODE);\n      },\n      cancelDiscardConfirmation: function cancelDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n      },\n      commit: function commit() {\n        mergeConflictsStore.setSubmitState(true);\n\n        mergeConflictsService.submitResolveConflicts(mergeConflictsStore.getCommitData()).done(function (data) {\n          window.location.href = data.redirect_to;\n        }).error(function () {\n          mergeConflictsStore.setSubmitState(false);\n          new Flash('Failed to save merge conflicts resolutions. Please try again!');\n        });\n      }\n    }\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"yEia\":\n/***/ (function(module, exports) {\n\n/* eslint-disable no-param-reassign, comma-dangle */\n/* global Vue */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.parallelConflictLines = Vue.extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions],\n    template: \"\\n      <table>\\n        <tr class=\\\"line_holder parallel\\\" v-for=\\\"section in file.parallelLines\\\">\\n          <template v-for=\\\"line in section\\\">\\n            <td class=\\\"diff-line-num header\\\" :class=\\\"lineCssClass(line)\\\" v-if=\\\"line.isHeader\\\"></td>\\n            <td class=\\\"line_content header\\\" :class=\\\"lineCssClass(line)\\\" v-if=\\\"line.isHeader\\\">\\n              <strong>{{line.richText}}</strong>\\n              <button class=\\\"btn\\\" @click=\\\"handleSelected(file, line.id, line.section)\\\">{{line.buttonTitle}}</button>\\n            </td>\\n            <td class=\\\"diff-line-num old_line\\\" :class=\\\"lineCssClass(line)\\\" v-if=\\\"!line.isHeader\\\">{{line.lineNumber}}</td>\\n            <td class=\\\"line_content parallel\\\" :class=\\\"lineCssClass(line)\\\" v-if=\\\"!line.isHeader\\\" v-html=\\\"line.richText\\\"></td>\\n          </template>\\n        </tr>\\n      </table>\\n    \"\n  });\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ \"zALn\":\n/***/ (function(module, exports) {\n\n/* eslint-disable no-param-reassign, quote-props, comma-dangle */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.utils = {\n    methods: {\n      lineCssClass: function lineCssClass(line) {\n        return {\n          'head': line.isHead,\n          'origin': line.isOrigin,\n          'match': line.hasMatch,\n          'selected': line.isSelected,\n          'unselected': line.isUnselected\n        };\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n/***/ })\n\n},[\"dIvF\"]);\n\n\n// WEBPACK FOOTER //\n// merge_conflicts.d5527011934e4fd61897.bundle.js","/* eslint-disable no-param-reassign, comma-dangle */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.actions = {\n    methods: {\n      handleSelected(file, sectionId, selection) {\n        gl.mergeConflicts.mergeConflictsStore.handleSelected(file, sectionId, selection);\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/mixins/line_conflict_actions.js","/* eslint-disable no-param-reassign, comma-dangle */\n/* global Vue */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.inlineConflictLines = Vue.extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions],\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/components/inline_conflict_lines.js","/* eslint-disable no-param-reassign, comma-dangle */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  class mergeConflictsService {\n    constructor(options) {\n      this.conflictsPath = options.conflictsPath;\n      this.resolveConflictsPath = options.resolveConflictsPath;\n    }\n\n    fetchConflictsData() {\n      return $.ajax({\n        dataType: 'json',\n        url: this.conflictsPath\n      });\n    }\n\n    submitResolveConflicts(data) {\n      return $.ajax({\n        url: this.resolveConflictsPath,\n        data: JSON.stringify(data),\n        contentType: 'application/json',\n        dataType: 'json',\n        method: 'POST'\n      });\n    }\n  }\n\n  global.mergeConflicts.mergeConflictsService = mergeConflictsService;\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/merge_conflict_service.js","/* eslint-disable comma-dangle, quote-props, no-useless-computed-key, object-shorthand, no-new, no-param-reassign, max-len */\n/* global Vue */\n/* global ace */\n/* global Flash */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.diffFileEditor = Vue.extend({\n    props: {\n      file: Object,\n      onCancelDiscardConfirmation: Function,\n      onAcceptDiscardConfirmation: Function\n    },\n    data() {\n      return {\n        saved: false,\n        loading: false,\n        fileLoaded: false,\n        originalContent: '',\n      };\n    },\n    computed: {\n      classObject() {\n        return {\n          'saved': this.saved,\n          'is-loading': this.loading\n        };\n      }\n    },\n    watch: {\n      ['file.showEditor'](val) {\n        this.resetEditorContent();\n\n        if (!val || this.fileLoaded || this.loading) {\n          return;\n        }\n\n        this.loadEditor();\n      }\n    },\n    mounted() {\n      if (this.file.loadEditor) {\n        this.loadEditor();\n      }\n    },\n    methods: {\n      loadEditor() {\n        this.loading = true;\n\n        $.get(this.file.content_path)\n          .done((file) => {\n            const content = this.$el.querySelector('pre');\n            const fileContent = document.createTextNode(file.content);\n\n            content.textContent = fileContent.textContent;\n\n            this.originalContent = file.content;\n            this.fileLoaded = true;\n            this.editor = ace.edit(content);\n            this.editor.$blockScrolling = Infinity; // Turn off annoying warning\n            this.editor.getSession().setMode(`ace/mode/${file.blob_ace_mode}`);\n            this.editor.on('change', () => {\n              this.saveDiffResolution();\n            });\n            this.saveDiffResolution();\n          })\n          .fail(() => {\n            new Flash('Failed to load the file, please try again.');\n          })\n          .always(() => {\n            this.loading = false;\n          });\n      },\n      saveDiffResolution() {\n        this.saved = true;\n\n        // This probably be better placed in the data provider\n        this.file.content = this.editor.getValue();\n        this.file.resolveEditChanged = this.file.content !== this.originalContent;\n        this.file.promptDiscardConfirmation = false;\n      },\n      resetEditorContent() {\n        if (this.fileLoaded) {\n          this.editor.setValue(this.originalContent, -1);\n        }\n      },\n      cancelDiscardConfirmation(file) {\n        this.onCancelDiscardConfirmation(file);\n      },\n      acceptDiscardConfirmation(file) {\n        this.onAcceptDiscardConfirmation(file);\n      }\n    }\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/components/diff_file_editor.js","/* eslint-disable comma-dangle, object-shorthand, no-param-reassign, camelcase, no-nested-ternary, no-continue, max-len */\n/* global Cookies */\n/* global Vue */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  const diffViewType = Cookies.get('diff_view');\n  const HEAD_HEADER_TEXT = 'HEAD//our changes';\n  const ORIGIN_HEADER_TEXT = 'origin//their changes';\n  const HEAD_BUTTON_TITLE = 'Use ours';\n  const ORIGIN_BUTTON_TITLE = 'Use theirs';\n  const INTERACTIVE_RESOLVE_MODE = 'interactive';\n  const EDIT_RESOLVE_MODE = 'edit';\n  const DEFAULT_RESOLVE_MODE = INTERACTIVE_RESOLVE_MODE;\n  const VIEW_TYPES = {\n    INLINE: 'inline',\n    PARALLEL: 'parallel'\n  };\n  const CONFLICT_TYPES = {\n    TEXT: 'text',\n    TEXT_EDITOR: 'text-editor'\n  };\n\n  global.mergeConflicts.mergeConflictsStore = {\n    state: {\n      isLoading: true,\n      hasError: false,\n      isSubmitting: false,\n      isParallel: diffViewType === VIEW_TYPES.PARALLEL,\n      diffViewType: diffViewType,\n      conflictsData: {}\n    },\n\n    setConflictsData(data) {\n      this.decorateFiles(data.files);\n\n      this.state.conflictsData = {\n        files: data.files,\n        commitMessage: data.commit_message,\n        sourceBranch: data.source_branch,\n        targetBranch: data.target_branch,\n        shortCommitSha: data.commit_sha.slice(0, 7),\n      };\n    },\n\n    decorateFiles(files) {\n      files.forEach((file) => {\n        file.content = '';\n        file.resolutionData = {};\n        file.promptDiscardConfirmation = false;\n        file.resolveMode = DEFAULT_RESOLVE_MODE;\n        file.filePath = this.getFilePath(file);\n        file.iconClass = `fa-${file.blob_icon}`;\n        file.blobPath = file.blob_path;\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.showEditor = false;\n          file.loadEditor = false;\n\n          this.setInlineLine(file);\n          this.setParallelLine(file);\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          file.showEditor = true;\n          file.loadEditor = true;\n        }\n      });\n    },\n\n    setInlineLine(file) {\n      file.inlineLines = [];\n\n      file.sections.forEach((section) => {\n        let currentLineType = 'new';\n        const { conflict, lines, id } = section;\n\n        if (conflict) {\n          file.inlineLines.push(this.getHeadHeaderLine(id));\n        }\n\n        lines.forEach((line) => {\n          const { type } = line;\n\n          if ((type === 'new' || type === 'old') && currentLineType !== type) {\n            currentLineType = type;\n            file.inlineLines.push({ lineType: 'emptyLine', richText: '' });\n          }\n\n          this.decorateLineForInlineView(line, id, conflict);\n          file.inlineLines.push(line);\n        });\n\n        if (conflict) {\n          file.inlineLines.push(this.getOriginHeaderLine(id));\n        }\n      });\n    },\n\n    setParallelLine(file) {\n      file.parallelLines = [];\n      const linesObj = { left: [], right: [] };\n\n      file.sections.forEach((section) => {\n        const { conflict, lines, id } = section;\n\n        if (conflict) {\n          linesObj.left.push(this.getOriginHeaderLine(id));\n          linesObj.right.push(this.getHeadHeaderLine(id));\n        }\n\n        lines.forEach((line) => {\n          const { type } = line;\n\n          if (conflict) {\n            if (type === 'old') {\n              linesObj.left.push(this.getLineForParallelView(line, id, 'conflict'));\n            } else if (type === 'new') {\n              linesObj.right.push(this.getLineForParallelView(line, id, 'conflict', true));\n            }\n          } else {\n            const lineType = type || 'context';\n\n            linesObj.left.push(this.getLineForParallelView(line, id, lineType));\n            linesObj.right.push(this.getLineForParallelView(line, id, lineType, true));\n          }\n        });\n\n        this.checkLineLengths(linesObj);\n      });\n\n      for (let i = 0, len = linesObj.left.length; i < len; i += 1) {\n        file.parallelLines.push([\n          linesObj.right[i],\n          linesObj.left[i]\n        ]);\n      }\n    },\n\n    setLoadingState(state) {\n      this.state.isLoading = state;\n    },\n\n    setErrorState(state) {\n      this.state.hasError = state;\n    },\n\n    setFailedRequest(message) {\n      this.state.hasError = true;\n      this.state.conflictsData.errorMessage = message;\n    },\n\n    getConflictsCount() {\n      if (!this.state.conflictsData.files.length) {\n        return 0;\n      }\n\n      const files = this.state.conflictsData.files;\n      let count = 0;\n\n      files.forEach((file) => {\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.sections.forEach((section) => {\n            if (section.conflict) {\n              count += 1;\n            }\n          });\n        } else {\n          count += 1;\n        }\n      });\n\n      return count;\n    },\n\n    getConflictsCountText() {\n      const count = this.getConflictsCount();\n      const text = count ? 'conflicts' : 'conflict';\n\n      return `${count} ${text}`;\n    },\n\n    setViewType(viewType) {\n      this.state.diffView = viewType;\n      this.state.isParallel = viewType === VIEW_TYPES.PARALLEL;\n\n      Cookies.set('diff_view', viewType);\n    },\n\n    getHeadHeaderLine(id) {\n      return {\n        id: id,\n        richText: HEAD_HEADER_TEXT,\n        buttonTitle: HEAD_BUTTON_TITLE,\n        type: 'new',\n        section: 'head',\n        isHeader: true,\n        isHead: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n\n    decorateLineForInlineView(line, id, conflict) {\n      const { type } = line;\n      line.id = id;\n      line.hasConflict = conflict;\n      line.isHead = type === 'new';\n      line.isOrigin = type === 'old';\n      line.hasMatch = type === 'match';\n      line.richText = line.rich_text;\n      line.isSelected = false;\n      line.isUnselected = false;\n    },\n\n    getLineForParallelView(line, id, lineType, isHead) {\n      const { old_line, new_line, rich_text } = line;\n      const hasConflict = lineType === 'conflict';\n\n      return {\n        id,\n        lineType,\n        hasConflict,\n        isHead: hasConflict && isHead,\n        isOrigin: hasConflict && !isHead,\n        hasMatch: lineType === 'match',\n        lineNumber: isHead ? new_line : old_line,\n        section: isHead ? 'head' : 'origin',\n        richText: rich_text,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n\n    getOriginHeaderLine(id) {\n      return {\n        id: id,\n        richText: ORIGIN_HEADER_TEXT,\n        buttonTitle: ORIGIN_BUTTON_TITLE,\n        type: 'old',\n        section: 'origin',\n        isHeader: true,\n        isOrigin: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n\n    getFilePath(file) {\n      const { old_path, new_path } = file;\n      return old_path === new_path ? new_path : `${old_path} → ${new_path}`;\n    },\n\n    checkLineLengths(linesObj) {\n      const { left, right } = linesObj;\n\n      if (left.length !== right.length) {\n        if (left.length > right.length) {\n          const diff = left.length - right.length;\n          for (let i = 0; i < diff; i += 1) {\n            right.push({ lineType: 'emptyLine', richText: '' });\n          }\n        } else {\n          const diff = right.length - left.length;\n          for (let i = 0; i < diff; i += 1) {\n            left.push({ lineType: 'emptyLine', richText: '' });\n          }\n        }\n      }\n    },\n\n    setPromptConfirmationState(file, state) {\n      file.promptDiscardConfirmation = state;\n    },\n\n    setFileResolveMode(file, mode) {\n      if (mode === INTERACTIVE_RESOLVE_MODE) {\n        file.showEditor = false;\n      } else if (mode === EDIT_RESOLVE_MODE) {\n        // Restore Interactive mode when switching to Edit mode\n        file.showEditor = true;\n        file.loadEditor = true;\n        file.resolutionData = {};\n\n        this.restoreFileLinesState(file);\n      }\n\n      file.resolveMode = mode;\n    },\n\n    restoreFileLinesState(file) {\n      file.inlineLines.forEach((line) => {\n        if (line.hasConflict || line.isHeader) {\n          line.isSelected = false;\n          line.isUnselected = false;\n        }\n      });\n\n      file.parallelLines.forEach((lines) => {\n        const left = lines[0];\n        const right = lines[1];\n        const isLeftMatch = left.hasConflict || left.isHeader;\n        const isRightMatch = right.hasConflict || right.isHeader;\n\n        if (isLeftMatch || isRightMatch) {\n          left.isSelected = false;\n          left.isUnselected = false;\n          right.isSelected = false;\n          right.isUnselected = false;\n        }\n      });\n    },\n\n    isReadyToCommit() {\n      const files = this.state.conflictsData.files;\n      const hasCommitMessage = $.trim(this.state.conflictsData.commitMessage).length;\n      let unresolved = 0;\n\n      for (let i = 0, l = files.length; i < l; i += 1) {\n        const file = files[i];\n\n        if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n          let numberConflicts = 0;\n          const resolvedConflicts = Object.keys(file.resolutionData).length;\n\n          // We only check for conflicts type 'text'\n          // since conflicts `text_editor` can´t be resolved in interactive mode\n          if (file.type === CONFLICT_TYPES.TEXT) {\n            for (let j = 0, k = file.sections.length; j < k; j += 1) {\n              if (file.sections[j].conflict) {\n                numberConflicts += 1;\n              }\n            }\n\n            if (resolvedConflicts !== numberConflicts) {\n              unresolved += 1;\n            }\n          }\n        } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n          // Unlikely to happen since switching to Edit mode saves content automatically.\n          // Checking anyway in case the save strategy changes in the future\n          if (!file.content) {\n            unresolved += 1;\n            continue;\n          }\n        }\n      }\n\n      return !this.state.isSubmitting && hasCommitMessage && !unresolved;\n    },\n\n    getCommitButtonText() {\n      const initial = 'Commit conflict resolution';\n      const inProgress = 'Committing...';\n\n      return this.state ? this.state.isSubmitting ? inProgress : initial : initial;\n    },\n\n    getCommitData() {\n      let commitData = {};\n\n      commitData = {\n        commit_message: this.state.conflictsData.commitMessage,\n        files: []\n      };\n\n      this.state.conflictsData.files.forEach((file) => {\n        const addFile = {\n          old_path: file.old_path,\n          new_path: file.new_path\n        };\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          // Submit only one data for type of editing\n          if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n            addFile.sections = file.resolutionData;\n          } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n            addFile.content = file.content;\n          }\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          addFile.content = file.content;\n        }\n\n        commitData.files.push(addFile);\n      });\n\n      return commitData;\n    },\n\n    handleSelected(file, sectionId, selection) {\n      Vue.set(file.resolutionData, sectionId, selection);\n\n      file.inlineLines.forEach((line) => {\n        if (line.id === sectionId && (line.hasConflict || line.isHeader)) {\n          this.markLine(line, selection);\n        }\n      });\n\n      file.parallelLines.forEach((lines) => {\n        const left = lines[0];\n        const right = lines[1];\n        const hasSameId = right.id === sectionId || left.id === sectionId;\n        const isLeftMatch = left.hasConflict || left.isHeader;\n        const isRightMatch = right.hasConflict || right.isHeader;\n\n        if (hasSameId && (isLeftMatch || isRightMatch)) {\n          this.markLine(left, selection);\n          this.markLine(right, selection);\n        }\n      });\n    },\n\n    markLine(line, selection) {\n      if (selection === 'head' && line.isHead) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else if (selection === 'origin' && line.isOrigin) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else {\n        line.isSelected = false;\n        line.isUnselected = true;\n      }\n    },\n\n    setSubmitState(state) {\n      this.state.isSubmitting = state;\n    },\n\n    fileTextTypePresent() {\n      return this.state.conflictsData.files.some(f => f.type === CONFLICT_TYPES.TEXT);\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/merge_conflict_store.js","/* eslint-disable new-cap, comma-dangle, no-new */\n/* global Vue */\n/* global Flash */\n\nwindow.Vue = require('vue');\nrequire('./merge_conflict_store');\nrequire('./merge_conflict_service');\nrequire('./mixins/line_conflict_utils');\nrequire('./mixins/line_conflict_actions');\nrequire('./components/diff_file_editor');\nrequire('./components/inline_conflict_lines');\nrequire('./components/parallel_conflict_lines');\n\n$(() => {\n  const INTERACTIVE_RESOLVE_MODE = 'interactive';\n  const conflictsEl = document.querySelector('#conflicts');\n  const mergeConflictsStore = gl.mergeConflicts.mergeConflictsStore;\n  const mergeConflictsService = new gl.mergeConflicts.mergeConflictsService({\n    conflictsPath: conflictsEl.dataset.conflictsPath,\n    resolveConflictsPath: conflictsEl.dataset.resolveConflictsPath\n  });\n\n  gl.MergeConflictsResolverApp = new Vue({\n    el: '#conflicts',\n    data: mergeConflictsStore.state,\n    components: {\n      'diff-file-editor': gl.mergeConflicts.diffFileEditor,\n      'inline-conflict-lines': gl.mergeConflicts.inlineConflictLines,\n      'parallel-conflict-lines': gl.mergeConflicts.parallelConflictLines\n    },\n    computed: {\n      conflictsCountText() { return mergeConflictsStore.getConflictsCountText(); },\n      readyToCommit() { return mergeConflictsStore.isReadyToCommit(); },\n      commitButtonText() { return mergeConflictsStore.getCommitButtonText(); },\n      showDiffViewTypeSwitcher() { return mergeConflictsStore.fileTextTypePresent(); }\n    },\n    created() {\n      mergeConflictsService\n        .fetchConflictsData()\n        .done((data) => {\n          if (data.type === 'error') {\n            mergeConflictsStore.setFailedRequest(data.message);\n          } else {\n            mergeConflictsStore.setConflictsData(data);\n          }\n        })\n        .error(() => {\n          mergeConflictsStore.setFailedRequest();\n        })\n        .always(() => {\n          mergeConflictsStore.setLoadingState(false);\n\n          this.$nextTick(() => {\n            $('.js-syntax-highlight').syntaxHighlight();\n          });\n        });\n    },\n    methods: {\n      handleViewTypeChange(viewType) {\n        mergeConflictsStore.setViewType(viewType);\n      },\n      onClickResolveModeButton(file, mode) {\n        if (mode === INTERACTIVE_RESOLVE_MODE && file.resolveEditChanged) {\n          mergeConflictsStore.setPromptConfirmationState(file, true);\n          return;\n        }\n\n        mergeConflictsStore.setFileResolveMode(file, mode);\n      },\n      acceptDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n        mergeConflictsStore.setFileResolveMode(file, INTERACTIVE_RESOLVE_MODE);\n      },\n      cancelDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n      },\n      commit() {\n        mergeConflictsStore.setSubmitState(true);\n\n        mergeConflictsService\n          .submitResolveConflicts(mergeConflictsStore.getCommitData())\n          .done((data) => {\n            window.location.href = data.redirect_to;\n          })\n          .error(() => {\n            mergeConflictsStore.setSubmitState(false);\n            new Flash('Failed to save merge conflicts resolutions. Please try again!');\n          });\n      }\n    }\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/merge_conflicts_bundle.js","/* eslint-disable no-param-reassign, comma-dangle */\n/* global Vue */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.parallelConflictLines = Vue.extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions],\n    template: `\n      <table>\n        <tr class=\"line_holder parallel\" v-for=\"section in file.parallelLines\">\n          <template v-for=\"line in section\">\n            <td class=\"diff-line-num header\" :class=\"lineCssClass(line)\" v-if=\"line.isHeader\"></td>\n            <td class=\"line_content header\" :class=\"lineCssClass(line)\" v-if=\"line.isHeader\">\n              <strong>{{line.richText}}</strong>\n              <button class=\"btn\" @click=\"handleSelected(file, line.id, line.section)\">{{line.buttonTitle}}</button>\n            </td>\n            <td class=\"diff-line-num old_line\" :class=\"lineCssClass(line)\" v-if=\"!line.isHeader\">{{line.lineNumber}}</td>\n            <td class=\"line_content parallel\" :class=\"lineCssClass(line)\" v-if=\"!line.isHeader\" v-html=\"line.richText\"></td>\n          </template>\n        </tr>\n      </table>\n    `,\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/components/parallel_conflict_lines.js","/* eslint-disable no-param-reassign, quote-props, comma-dangle */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.utils = {\n    methods: {\n      lineCssClass(line) {\n        return {\n          'head': line.isHead,\n          'origin': line.isOrigin,\n          'match': line.hasMatch,\n          'selected': line.isSelected,\n          'unselected': line.isUnselected\n        };\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/mixins/line_conflict_utils.js"],"sourceRoot":""}