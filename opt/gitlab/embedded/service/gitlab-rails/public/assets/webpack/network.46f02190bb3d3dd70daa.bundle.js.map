{"version":3,"sources":["webpack:///network.46f02190bb3d3dd70daa.bundle.js","webpack:///./network/network.js","webpack:///./network/network_bundle.js","webpack:///./network/branch_graph.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raphael/raphael.js","webpack:///./network/raphael.js"],"names":["webpackJsonp","+jvm","module","__webpack_exports__","__webpack_require__","$","__WEBPACK_IMPORTED_MODULE_0__branch_graph__","Network","opts","vph","click","this","closest","submit","branch_graph","window","height","css","call","45VA","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__network__","length","network_graph","url","attr","commit_url","ref","commit_id","ShortcutsNetwork","AKfL","__WEBPACK_IMPORTED_MODULE_0__raphael__","BranchGraph","element1","options1","element","options","scrollTop","bind","scrollBottom","scrollRight","scrollLeft","scrollUp","scrollDown","preparedCommits","mtime","mspace","parents","colors","offsetX","offsetY","unitTime","unitSpace","prev_start","load","prototype","ajax","method","dataType","success","proxy","data","hide","prepareData","days","commits","buildGraph","c","ch","cw","j","len","collectParents","graphHeight","graphWidth","width","Math","max","r","i","get","top","set","barHeight","id","isParent","markCommit","collectColors","p","results","time","space","push","l","len1","ref1","results1","k","getColor","cuday","cumonth","day","mm","rect","fill","text","font","renderPartialGraph","bindEvents","commit","end","isGraphEdge","start","x","y","floor","abs","hasDrawn","drawDot","drawLines","appendLabel","appendAnchor","toFront","scroll","_this","event","find","label","shortrefs","textbox","triangle","refs","substr","text-anchor","title","getBBox","fill-opacity","stroke","path","transform","anchor","circle","opacity","cursor","open","replace","hover","tooltip","commitTooltip","insertBefore","remove","avatar_box_x","avatar_box_y","stroke-width","image","author","icon","message","split","arrow","color","offset","parent","parentCommit","parentX1","parentX2","parentY","route","J1aa","exports","root","factory","modules","moduleId","installedModules","loaded","m","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","R","apply","undefined","eve","first","is","on","array","_engine","create","splice","nu","add","args","Array","slice","arguments","f","pop","clone","obj","res","constructor","key","has","repush","item","ii","cacher","scope","postprocessor","newf","arg","join","cache","count","shift","clrToString","hex","catmullRom2bezier","crp","z","d","iLen","base3","t","p1","p2","p3","p4","t1","t2","bezlen","x1","y1","x2","y2","x3","y3","x4","y4","z2","n","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","math","sqrt","getTatLen","ll","step","e","intersect","mmax","mmin","nx","ny","denominator","px","py","px2","toFixed","py2","interHelper","bez1","bez2","justCount","bbox1","bezierBBox","bbox2","isBBoxIntersect","l1","l2","n1","n2","dots1","dots2","xy","findDotsAtSegment","concat","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","_path2curve","x1m","y1m","x2m","y2m","pi","jj","pj","intr","kk","segment1","segment2","Matrix","a","b","x_y_w_h","S","CubicBezierAtTime","p1x","p1y","p2x","p2y","duration","sampleCurveX","ax","bx","cx","solve","epsilon","solveCurveX","ay","by","cy","t0","d2","Animation","anim","ms","percents","newAnim","times","toFloat","sort","sortByNumber","runAnimation","percent","status","totalOrigin","params","isInAnim","isInAnimSet","next","prev","timestamp","from","to","diff","animationElements","el","initstatus","Date","availableAnimAttrs","paper","customAttributes","availableAttrs","getRGB","toColour","g","pathes","path2curve","toPath","_","eq","equaliseTransform","real","matrix","to2","extractTransform","values","Str","separator","from2","easing","easyeasy","easing_formulas","match","bezierrg","curve","pipe","del","stop","callback","repeat","origin","animation","requestAnimFrame","stopAnimation","version","paperproto","elements","ellipse","formatrg","doc","document","win","oldRaphael","was","Raphael","Paper","ca","supportsTouch","DocumentTouch","E","String","events","touchMap","mousedown","mousemove","mouseup","lowerCase","toLowerCase","min","pow","PI","string","objectToString","toString","colourRegExp","_ISURL","isnan","NaN","Infinity","-Infinity","round","parseFloat","toInt","parseInt","upperCase","toUpperCase","_availableAttrs","arrow-end","arrow-start","blur","clip-rect","font-family","font-size","font-style","font-weight","gradient","href","letter-spacing","rx","ry","src","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","target","class","_availableAnimAttrs","commaSpaces","hsrg","hs","rg","p2s","pathCommand","tCommand","pathValues","eldata","_radial_gradient","rectPath","_rectPath","w","h","ellipsePath","getPath","_getPath","attrs","bbox","_getBBox","mapPath","pathi","_g","type","SVGAngle","implementation","hasFeature","createElement","innerHTML","firstChild","style","behavior","adj","svg","vml","_Paper","fn","_id","o","isArray","angle","atan2","rad","deg","snapTo","tolerance","rem","createUUID","uuidRegEx","uuidReplacer","random","v","setWindow","newwin","initWin","toHex","bod","trim","docum","ActiveXObject","write","close","body","createPopup","range","createTextRange","queryCommandValue","display","appendChild","defaultView","getComputedStyle","getPropertyValue","hsbtoString","s","hsltoString","rgbtoString","prepareRGB","clr","packageRGB","rgb","hsb2rgb","hsl2rgb","rgb2hsl","rgb2hsb","G","B","X","C","H","V","L","M","_path2string","_preload","img","cssText","onload","removeChild","onerror","colour","indexOf","error","substring","charAt","red","green","blue","hsb","hsl","reset","parsePathString","pathString","pth","paths","arr","pathClone","paramCounts","q","name","parseTransformString","TString","ps","sleep","setTimeout","c1x","c1y","c2x","c2y","t13","t12","t3","mx","my","alpha","curveDim","isPointInsideBBox","pathIntersection","pathIntersectionNumber","isPointInsidePath","pathBBox","_removedFactory","methodname","pathDimensions","Y","dim","xmin","ymin","xmax","ymax","bb","pathArray","pathToRelative","_pathToRelative","rel","pa","pathToAbsolute","_pathToAbsolute","crz","dots","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","rotate","cos","sin","f1","f2","rx2","ry2","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","tan","hx","hy","m1","m2","m3","m4","newres","findDotAtSegment","dot","qx","qy","attrs2","processPath","pcom","tq","T","Q","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","tear","_parseDots","par","_tear","bottom","toMatrix","_tofront","_toback","_insertafter","el2","_insertbefore","transformPath","_extractTransform","tstr","tdata","dx","dy","sx","sy","tlen","command","absolute","inver","invert","translate","scale","dirtyT","getEmpty","_equaliseTransform","tt1","tt2","maxlength","_getContainer","container","getElementById","tagName","pixelWidth","offsetWidth","pixelHeight","offsetHeight","matrixproto","norm","normalize","mag","out","me","fromCharCode","toFilter","row","scalex","shear","scaley","acos","isSimple","isSuperSimple","noRotation","toTransformString","shorter","preventDefault","returnValue","preventTouch","originalEvent","stopPropagation","cancelBubble","stopTouch","getEventPosition","scrollY","documentElement","scrollX","clientX","clientY","addEvent","addEventListener","pos","_f","olde","targetTouches","removeEventListener","attachEvent","detacher","detachEvent","drag","dragMove","dragi","touches","touch","identifier","_drag","node","nextSibling","parentNode","opera","getElementByPoint","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","elproto","eventName","unbind","shape","removeData","getData","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","onDragOver","undrag","unmousedown","__set__","format","itemsArray","Set","setStart","setFinish","getSize","canvas","setSize","setViewBox","fit","raphael","getOffset","elem","box","getBoundingClientRect","ownerDocument","docElem","clientTop","clientLeft","pageYOffset","left","pageXOffset","elementFromPoint","so","sr","createSVGRect","hits","getIntersectionList","getById","raphaelid","getElementsByBBox","forEach","bot","thisArg","getElementsByPoint","isPointInside","rp","realPath","isWithoutTransform","removed","dirty","bboxwt","glow","offsetx","offsety","getPointAtSegmentLength","getLengthFactory","istotal","subpath","onlystart","point","sp","subpaths","getTotalLength","getPointAtLength","getSubpathsAtLength","getSubpath","ef","linear","<",">","<>","backIn","backOut","elastic","bounce","easeIn","easeOut","easeInOut","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Now","paused","now","that","init","upto255","animateWith","onAnimation","delay","json","100","lastKey","animate","setTime","pause","resume","items","setproto","clear","index","insertion","tail","todel","arglen","exclude","collector","insertAfter","glowConfig","ret","shape2","index2","registerFont","face","fonts","fontcopy","glyphs","family","prop","glyph","getFont","weight","stretch","normal","bold","lighter","bolder","RegExp","fontName","test","thefont","print","size","letter_spacing","line_spacing","letters","notfirst","lineHeight","shifty","descent","curr","token","str","fullfill","tokenRegex","objNotationRegex","replacer","all","quote","quotedName","isFunc","ninja","st","isLoaded","readyState","glob","current_event","comaseparator","wildcard","numsort","firstDefined","lastDefined","objtos","ar","oldstop","listeners","indexed","queue","ce","zIndex","_events","nes","names","es","sep","exist","hasOwnProperty","nt","subname","cur","nts","off","funcs","once","xlink","markers","block","classic","diamond","oval","markerCounter","setAttributeNS","setAttribute","createElementNS","webkitTapHighlightColor","addGradientFill","fx","fy","SVG","_fx","_fy","dir","isNaN","vector","defs","gradientTransform","stop-color","stop-opacity","isFinite","fillurl","fillOpacity","isIE9or10","mode","documentMode","location","locationString","protocol","host","pathname","search","updatePosition","pattern","patternTransform","addArrow","isEnd","refX","se","arrows","endPath","endMarker","startPath","startMarker","pathId","markerId","use","marker","getElementsByTagName","markerHeight","markerWidth","orient","refY","xlink:href","delta","startdx","enddx","dasharray","-",".","-.","-..",". ","- ","--","- .","--.","--..","addDashes","butt","square","dashes","setFillAndStroke","vis","visibility","att","nodeValue","val","createTextNode","pn","hl","clip","rc","clip-path","getAttribute","startString","endString","isURL","ig","patternUnits","stops","cssrule","tuneText","leading","fontSize","tspan","texts","tspans","dif","getRealNode","Element","guid","sw","show","containerStyle","canvasHidden","parentElement","clientWidth","clientHeight","def","subkey","toBack","afterNode","beforeNode","fltr","stdDeviation","_blur","filter","removeAttribute","preserveAspectRatio","_viewBox","con","Error","isFloating","cnvs","xmlns","xmlns:xlink","_left","_top","renderfix","vb","paperSize","aspectRatio","_vbSize","viewBox","getScreenCTM","createSVGMatrix","desc","fillString","map","Z","bites","blurregexp","cssDot","zoom","pathTypes","ovalTypes","path2vml","total","vals","isMove","compensation","setCoords","fillpos","flip","kx","ky","coordsize","rotation","coordorigin","fillsize","position","newpath","isOval","div","clipRect","dstyle","textpath","textpathStyle","fontFamily","fontWeight","fontStyle","newfill","createNode","newstroke","strokeColor","joinstyle","miterlimit","endcap","dashstyle","span","brect","W","right","dirtyattrs","dd","bbx","fxfy","color2","clrs","focus","focussize","focusposition","_oid","oldt","vbs","_viewBoxShift","vbt","skew","isGrad","isPatt","bbt","auxGetBBox","runtimeStyle","margin","Path","textpathok","cs","styleSheets","createStyleSheet","addRule","namespaces","rvml","Whru","__WEBPACK_IMPORTED_MODULE_0_raphael_raphael__","__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default","boxWidth","gon","relative_url_root","nameText","idText","messageText","textSet","textWrap","content","abc","letterWidth","words","word"],"mappings":"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","file":"network.46f02190bb3d3dd70daa.bundle.js","sourcesContent":["webpackJsonp([13,25,26],{\n\n/***/ \"+jvm\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__branch_graph__ = __webpack_require__(\"AKfL\");\n/* eslint-disable func-names, space-before-function-paren, wrap-iife, no-var, quotes, quote-props, prefer-template, comma-dangle, max-len */\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (function () {\n  function Network(opts) {\n    var vph;\n    $(\"#filter_ref\").click(function () {\n      return $(this).closest('form').submit();\n    });\n    this.branch_graph = new __WEBPACK_IMPORTED_MODULE_0__branch_graph__[\"a\" /* default */]($(\".network-graph\"), opts);\n    vph = $(window).height() - 250;\n    $('.network-graph').css({\n      'height': vph + 'px'\n    });\n  }\n\n  return Network;\n})();\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"45VA\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__network__ = __webpack_require__(\"+jvm\");\n/* eslint-disable func-names, space-before-function-paren, prefer-arrow-callback, quotes, no-var, vars-on-top, camelcase, comma-dangle, consistent-return, max-len */\n/* global ShortcutsNetwork */\n\n\n\n$(function () {\n  if (!$(\".network-graph\").length) return;\n\n  var network_graph;\n  network_graph = new __WEBPACK_IMPORTED_MODULE_0__network__[\"a\" /* default */]({\n    url: $(\".network-graph\").attr('data-url'),\n    commit_url: $(\".network-graph\").attr('data-commit-url'),\n    ref: $(\".network-graph\").attr('data-ref'),\n    commit_id: $(\".network-graph\").attr('data-commit-id')\n  });\n  return new ShortcutsNetwork(network_graph.branch_graph);\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"AKfL\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__raphael__ = __webpack_require__(\"Whru\");\n/* eslint-disable func-names, space-before-function-paren, no-var, wrap-iife, quotes, comma-dangle, one-var, one-var-declaration-per-line, no-mixed-operators, no-loop-func, no-floating-decimal, consistent-return, no-unused-vars, prefer-template, prefer-arrow-callback, camelcase, max-len */\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (function () {\n  function BranchGraph(element1, options1) {\n    this.element = element1;\n    this.options = options1;\n    this.scrollTop = this.scrollTop.bind(this);\n    this.scrollBottom = this.scrollBottom.bind(this);\n    this.scrollRight = this.scrollRight.bind(this);\n    this.scrollLeft = this.scrollLeft.bind(this);\n    this.scrollUp = this.scrollUp.bind(this);\n    this.scrollDown = this.scrollDown.bind(this);\n    this.preparedCommits = {};\n    this.mtime = 0;\n    this.mspace = 0;\n    this.parents = {};\n    this.colors = [\"#000\"];\n    this.offsetX = 150;\n    this.offsetY = 20;\n    this.unitTime = 30;\n    this.unitSpace = 10;\n    this.prev_start = -1;\n    this.load();\n  }\n\n  BranchGraph.prototype.load = function () {\n    return $.ajax({\n      url: this.options.url,\n      method: \"get\",\n      dataType: \"json\",\n      success: $.proxy(function (data) {\n        $(\".loading\", this.element).hide();\n        this.prepareData(data.days, data.commits);\n        return this.buildGraph();\n      }, this)\n    });\n  };\n\n  BranchGraph.prototype.prepareData = function (days, commits) {\n    var c, ch, cw, j, len, ref;\n    this.days = days;\n    this.commits = commits;\n    this.collectParents();\n    this.graphHeight = $(this.element).height();\n    this.graphWidth = $(this.element).width();\n    ch = Math.max(this.graphHeight, this.offsetY + this.unitTime * this.mtime + 150);\n    cw = Math.max(this.graphWidth, this.offsetX + this.unitSpace * this.mspace + 300);\n    this.r = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */])(this.element.get(0), cw, ch);\n    this.top = this.r.set();\n    this.barHeight = Math.max(this.graphHeight, this.unitTime * this.days.length + 320);\n    ref = this.commits;\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      if (c.id in this.parents) {\n        c.isParent = true;\n      }\n      this.preparedCommits[c.id] = c;\n      this.markCommit(c);\n    }\n    return this.collectColors();\n  };\n\n  BranchGraph.prototype.collectParents = function () {\n    var c, j, len, p, ref, results;\n    ref = this.commits;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      this.mtime = Math.max(this.mtime, c.time);\n      this.mspace = Math.max(this.mspace, c.space);\n      results.push(function () {\n        var l, len1, ref1, results1;\n        ref1 = c.parents;\n        results1 = [];\n        for (l = 0, len1 = ref1.length; l < len1; l += 1) {\n          p = ref1[l];\n          this.parents[p[0]] = true;\n          results1.push(this.mspace = Math.max(this.mspace, p[1]));\n        }\n        return results1;\n      }.call(this));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.collectColors = function () {\n    var k, results;\n    k = 0;\n    results = [];\n    while (k < this.mspace) {\n      this.colors.push(__WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor(.8));\n      // Skipping a few colors in the spectrum to get more contrast between colors\n      __WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor();\n      __WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor();\n      results.push(k += 1);\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.buildGraph = function () {\n    var cuday, cumonth, day, j, len, mm, r, ref;\n    r = this.r;\n    cuday = 0;\n    cumonth = \"\";\n    r.rect(0, 0, 40, this.barHeight).attr({\n      fill: \"#222\"\n    });\n    r.rect(40, 0, 30, this.barHeight).attr({\n      fill: \"#444\"\n    });\n    ref = this.days;\n    for (mm = j = 0, len = ref.length; j < len; mm = j += 1) {\n      day = ref[mm];\n      if (cuday !== day[0] || cumonth !== day[1]) {\n        // Dates\n        r.text(55, this.offsetY + this.unitTime * mm, day[0]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#BBB\"\n        });\n        cuday = day[0];\n      }\n      if (cumonth !== day[1]) {\n        // Months\n        r.text(20, this.offsetY + this.unitTime * mm, day[1]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#EEE\"\n        });\n        cumonth = day[1];\n      }\n    }\n    this.renderPartialGraph();\n    return this.bindEvents();\n  };\n\n  BranchGraph.prototype.renderPartialGraph = function () {\n    var commit, end, i, isGraphEdge, start, x, y;\n    start = Math.floor((this.element.scrollTop() - this.offsetY) / this.unitTime) - 10;\n    if (start < 0) {\n      isGraphEdge = true;\n      start = 0;\n    }\n    end = start + 40;\n    if (this.commits.length < end) {\n      isGraphEdge = true;\n      end = this.commits.length;\n    }\n    if (this.prev_start === -1 || Math.abs(this.prev_start - start) > 10 || isGraphEdge) {\n      i = start;\n      this.prev_start = start;\n      while (i < end) {\n        commit = this.commits[i];\n        i += 1;\n        if (commit.hasDrawn !== true) {\n          x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n          y = this.offsetY + this.unitTime * commit.time;\n          this.drawDot(x, y, commit);\n          this.drawLines(x, y, commit);\n          this.appendLabel(x, y, commit);\n          this.appendAnchor(x, y, commit);\n          commit.hasDrawn = true;\n        }\n      }\n      return this.top.toFront();\n    }\n  };\n\n  BranchGraph.prototype.bindEvents = function () {\n    var element;\n    element = this.element;\n    return $(element).scroll(function (_this) {\n      return function (event) {\n        return _this.renderPartialGraph();\n      };\n    }(this));\n  };\n\n  BranchGraph.prototype.scrollDown = function () {\n    this.element.scrollTop(this.element.scrollTop() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollUp = function () {\n    this.element.scrollTop(this.element.scrollTop() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollLeft = function () {\n    this.element.scrollLeft(this.element.scrollLeft() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollRight = function () {\n    this.element.scrollLeft(this.element.scrollLeft() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollBottom = function () {\n    return this.element.scrollTop(this.element.find('svg').height());\n  };\n\n  BranchGraph.prototype.scrollTop = function () {\n    return this.element.scrollTop(0);\n  };\n\n  BranchGraph.prototype.appendLabel = function (x, y, commit) {\n    var label, r, rect, shortrefs, text, textbox, triangle;\n    if (!commit.refs) {\n      return;\n    }\n    r = this.r;\n    shortrefs = commit.refs;\n    // Truncate if longer than 15 chars\n    if (shortrefs.length > 17) {\n      shortrefs = shortrefs.substr(0, 15) + \"…\";\n    }\n    text = r.text(x + 4, y, shortrefs).attr({\n      \"text-anchor\": \"start\",\n      font: \"10px Monaco, monospace\",\n      fill: \"#FFF\",\n      title: commit.refs\n    });\n    textbox = text.getBBox();\n    // Create rectangle based on the size of the textbox\n    rect = r.rect(x, y - 7, textbox.width + 5, textbox.height + 5, 4).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    triangle = r.path([\"M\", x - 5, y, \"L\", x - 15, y - 4, \"L\", x - 15, y + 4, \"Z\"]).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    label = r.set(rect, text);\n    label.transform([\"t\", -rect.getBBox().width - 15, 0]);\n    // Set text to front\n    return text.toFront();\n  };\n\n  BranchGraph.prototype.appendAnchor = function (x, y, commit) {\n    var anchor, options, r, top;\n    r = this.r;\n    top = this.top;\n    options = this.options;\n    anchor = r.circle(x, y, 10).attr({\n      fill: \"#000\",\n      opacity: 0,\n      cursor: \"pointer\"\n    }).click(function () {\n      return window.open(options.commit_url.replace(\"%s\", commit.id), \"_blank\");\n    }).hover(function () {\n      this.tooltip = r.commitTooltip(x + 5, y, commit);\n      return top.push(this.tooltip.insertBefore(this));\n    }, function () {\n      return this.tooltip && this.tooltip.remove() && delete this.tooltip;\n    });\n    return top.push(anchor);\n  };\n\n  BranchGraph.prototype.drawDot = function (x, y, commit) {\n    var avatar_box_x, avatar_box_y, r;\n    r = this.r;\n    r.circle(x, y, 3).attr({\n      fill: this.colors[commit.space],\n      stroke: \"none\"\n    });\n    avatar_box_x = this.offsetX + this.unitSpace * this.mspace + 10;\n    avatar_box_y = y - 10;\n    r.rect(avatar_box_x, avatar_box_y, 20, 20).attr({\n      stroke: this.colors[commit.space],\n      \"stroke-width\": 2\n    });\n    r.image(commit.author.icon, avatar_box_x, avatar_box_y, 20, 20);\n    return r.text(this.offsetX + this.unitSpace * this.mspace + 35, y, commit.message.split(\"\\n\")[0]).attr({\n      \"text-anchor\": \"start\",\n      font: \"14px Monaco, monospace\"\n    });\n  };\n\n  BranchGraph.prototype.drawLines = function (x, y, commit) {\n    var arrow, color, i, j, len, offset, parent, parentCommit, parentX1, parentX2, parentY, r, ref, results, route;\n    r = this.r;\n    ref = commit.parents;\n    results = [];\n    for (i = j = 0, len = ref.length; j < len; i = j += 1) {\n      parent = ref[i];\n      parentCommit = this.preparedCommits[parent[0]];\n      parentY = this.offsetY + this.unitTime * parentCommit.time;\n      parentX1 = this.offsetX + this.unitSpace * (this.mspace - parentCommit.space);\n      parentX2 = this.offsetX + this.unitSpace * (this.mspace - parent[1]);\n      // Set line color\n      if (parentCommit.space <= commit.space) {\n        color = this.colors[commit.space];\n      } else {\n        color = this.colors[parentCommit.space];\n      }\n      // Build line shape\n      if (parent[1] === commit.space) {\n        offset = [0, 5];\n        arrow = \"l-2,5,4,0,-2,-5,0,5\";\n      } else if (parent[1] < commit.space) {\n        offset = [3, 3];\n        arrow = \"l5,0,-2,4,-3,-4,4,2\";\n      } else {\n        offset = [-3, 3];\n        arrow = \"l-5,0,2,4,3,-4,-4,2\";\n      }\n      // Start point\n      route = [\"M\", x + offset[0], y + offset[1]];\n      // Add arrow if not first parent\n      if (i > 0) {\n        route.push(arrow);\n      }\n      // Circumvent if overlap\n      if (commit.space !== parentCommit.space || commit.space !== parent[1]) {\n        route.push(\"L\", parentX2, y + 10, \"L\", parentX2, parentY - 5);\n      }\n      // End point\n      route.push(\"L\", parentX1, parentY);\n      results.push(r.path(route).attr({\n        stroke: color,\n        \"stroke-width\": 2\n      }));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.markCommit = function (commit) {\n    var r, x, y;\n    if (commit.id === this.options.commit_id) {\n      r = this.r;\n      x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n      y = this.offsetY + this.unitTime * commit.time;\n      r.path([\"M\", x + 5, y, \"L\", x + 15, y + 4, \"L\", x + 15, y - 4, \"Z\"]).attr({\n        fill: \"#000\",\n        \"fill-opacity\": .5,\n        stroke: \"none\"\n      });\n      // Displayed in the center\n      return this.element.scrollTop(y - this.graphHeight / 2);\n    }\n  };\n\n  return BranchGraph;\n})();\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"lwLq\")))\n\n/***/ }),\n\n/***/ \"J1aa\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n/***/ }),\n\n/***/ \"Whru\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raphael_raphael__ = __webpack_require__(\"J1aa\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_raphael_raphael__);\n\n\n__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a.prototype.commitTooltip = function commitTooltip(x, y, commit) {\n  var boxWidth = 300;\n  var icon = this.image(gon.relative_url_root + commit.author.icon, x, y, 20, 20);\n  var nameText = this.text(x + 25, y + 10, commit.author.name);\n  var idText = this.text(x, y + 35, commit.id);\n  var messageText = this.text(x, y + 50, commit.message.replace(/\\r?\\n/g, ' \\n '));\n  var textSet = this.set(icon, nameText, idText, messageText).attr({\n    'text-anchor': 'start',\n    font: '12px Monaco, monospace'\n  });\n  nameText.attr({\n    font: '14px Arial',\n    'font-weight': 'bold'\n  });\n  idText.attr({\n    fill: '#AAA'\n  });\n  messageText.node.style['white-space'] = 'pre';\n  this.textWrap(messageText, boxWidth - 50);\n  var rect = this.rect(x - 10, y - 10, boxWidth, 100, 4).attr({\n    fill: '#FFF',\n    stroke: '#000',\n    'stroke-linecap': 'round',\n    'stroke-width': 2\n  });\n  var tooltip = this.set(rect, textSet);\n  rect.attr({\n    height: tooltip.getBBox().height + 10,\n    width: tooltip.getBBox().width + 10\n  });\n  tooltip.transform(['t', 20, 20]);\n  return tooltip;\n};\n\n__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a.prototype.textWrap = function testWrap(t, width) {\n  var content = t.attr('text');\n  var abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  t.attr({\n    text: abc\n  });\n  var letterWidth = t.getBBox().width / abc.length;\n  t.attr({\n    text: content\n  });\n  var words = content.split(' ');\n  var x = 0;\n  var s = [];\n  for (var j = 0, len = words.length; j < len; j += 1) {\n    var word = words[j];\n    if (x + word.length * letterWidth > width) {\n      s.push('\\n');\n      x = 0;\n    }\n    if (word === '\\n') {\n      s.push('\\n');\n      x = 0;\n    } else {\n      s.push(word + ' ');\n      x += word.length * letterWidth;\n    }\n  }\n  t.attr({\n    text: s.join('').trim()\n  });\n  var b = t.getBBox();\n  var h = Math.abs(b.y2) + 1;\n  return t.attr({\n    y: h\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = __WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a;\n\n/***/ })\n\n},[\"45VA\"]);\n\n\n// WEBPACK FOOTER //\n// network.46f02190bb3d3dd70daa.bundle.js","/* eslint-disable func-names, space-before-function-paren, wrap-iife, no-var, quotes, quote-props, prefer-template, comma-dangle, max-len */\n\nimport BranchGraph from './branch_graph';\n\nexport default (function() {\n  function Network(opts) {\n    var vph;\n    $(\"#filter_ref\").click(function() {\n      return $(this).closest('form').submit();\n    });\n    this.branch_graph = new BranchGraph($(\".network-graph\"), opts);\n    vph = $(window).height() - 250;\n    $('.network-graph').css({\n      'height': vph + 'px'\n    });\n  }\n\n  return Network;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./network/network.js","/* eslint-disable func-names, space-before-function-paren, prefer-arrow-callback, quotes, no-var, vars-on-top, camelcase, comma-dangle, consistent-return, max-len */\n/* global ShortcutsNetwork */\n\nimport Network from './network';\n\n$(function() {\n  if (!$(\".network-graph\").length) return;\n\n  var network_graph;\n  network_graph = new Network({\n    url: $(\".network-graph\").attr('data-url'),\n    commit_url: $(\".network-graph\").attr('data-commit-url'),\n    ref: $(\".network-graph\").attr('data-ref'),\n    commit_id: $(\".network-graph\").attr('data-commit-id')\n  });\n  return new ShortcutsNetwork(network_graph.branch_graph);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./network/network_bundle.js","/* eslint-disable func-names, space-before-function-paren, no-var, wrap-iife, quotes, comma-dangle, one-var, one-var-declaration-per-line, no-mixed-operators, no-loop-func, no-floating-decimal, consistent-return, no-unused-vars, prefer-template, prefer-arrow-callback, camelcase, max-len */\n\nimport Raphael from './raphael';\n\nexport default (function() {\n  function BranchGraph(element1, options1) {\n    this.element = element1;\n    this.options = options1;\n    this.scrollTop = this.scrollTop.bind(this);\n    this.scrollBottom = this.scrollBottom.bind(this);\n    this.scrollRight = this.scrollRight.bind(this);\n    this.scrollLeft = this.scrollLeft.bind(this);\n    this.scrollUp = this.scrollUp.bind(this);\n    this.scrollDown = this.scrollDown.bind(this);\n    this.preparedCommits = {};\n    this.mtime = 0;\n    this.mspace = 0;\n    this.parents = {};\n    this.colors = [\"#000\"];\n    this.offsetX = 150;\n    this.offsetY = 20;\n    this.unitTime = 30;\n    this.unitSpace = 10;\n    this.prev_start = -1;\n    this.load();\n  }\n\n  BranchGraph.prototype.load = function() {\n    return $.ajax({\n      url: this.options.url,\n      method: \"get\",\n      dataType: \"json\",\n      success: $.proxy(function(data) {\n        $(\".loading\", this.element).hide();\n        this.prepareData(data.days, data.commits);\n        return this.buildGraph();\n      }, this)\n    });\n  };\n\n  BranchGraph.prototype.prepareData = function(days, commits) {\n    var c, ch, cw, j, len, ref;\n    this.days = days;\n    this.commits = commits;\n    this.collectParents();\n    this.graphHeight = $(this.element).height();\n    this.graphWidth = $(this.element).width();\n    ch = Math.max(this.graphHeight, this.offsetY + this.unitTime * this.mtime + 150);\n    cw = Math.max(this.graphWidth, this.offsetX + this.unitSpace * this.mspace + 300);\n    this.r = Raphael(this.element.get(0), cw, ch);\n    this.top = this.r.set();\n    this.barHeight = Math.max(this.graphHeight, this.unitTime * this.days.length + 320);\n    ref = this.commits;\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      if (c.id in this.parents) {\n        c.isParent = true;\n      }\n      this.preparedCommits[c.id] = c;\n      this.markCommit(c);\n    }\n    return this.collectColors();\n  };\n\n  BranchGraph.prototype.collectParents = function() {\n    var c, j, len, p, ref, results;\n    ref = this.commits;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      this.mtime = Math.max(this.mtime, c.time);\n      this.mspace = Math.max(this.mspace, c.space);\n      results.push((function() {\n        var l, len1, ref1, results1;\n        ref1 = c.parents;\n        results1 = [];\n        for (l = 0, len1 = ref1.length; l < len1; l += 1) {\n          p = ref1[l];\n          this.parents[p[0]] = true;\n          results1.push(this.mspace = Math.max(this.mspace, p[1]));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.collectColors = function() {\n    var k, results;\n    k = 0;\n    results = [];\n    while (k < this.mspace) {\n      this.colors.push(Raphael.getColor(.8));\n      // Skipping a few colors in the spectrum to get more contrast between colors\n      Raphael.getColor();\n      Raphael.getColor();\n      results.push(k += 1);\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.buildGraph = function() {\n    var cuday, cumonth, day, j, len, mm, r, ref;\n    r = this.r;\n    cuday = 0;\n    cumonth = \"\";\n    r.rect(0, 0, 40, this.barHeight).attr({\n      fill: \"#222\"\n    });\n    r.rect(40, 0, 30, this.barHeight).attr({\n      fill: \"#444\"\n    });\n    ref = this.days;\n    for (mm = j = 0, len = ref.length; j < len; mm = (j += 1)) {\n      day = ref[mm];\n      if (cuday !== day[0] || cumonth !== day[1]) {\n        // Dates\n        r.text(55, this.offsetY + this.unitTime * mm, day[0]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#BBB\"\n        });\n        cuday = day[0];\n      }\n      if (cumonth !== day[1]) {\n        // Months\n        r.text(20, this.offsetY + this.unitTime * mm, day[1]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#EEE\"\n        });\n        cumonth = day[1];\n      }\n    }\n    this.renderPartialGraph();\n    return this.bindEvents();\n  };\n\n  BranchGraph.prototype.renderPartialGraph = function() {\n    var commit, end, i, isGraphEdge, start, x, y;\n    start = Math.floor((this.element.scrollTop() - this.offsetY) / this.unitTime) - 10;\n    if (start < 0) {\n      isGraphEdge = true;\n      start = 0;\n    }\n    end = start + 40;\n    if (this.commits.length < end) {\n      isGraphEdge = true;\n      end = this.commits.length;\n    }\n    if (this.prev_start === -1 || Math.abs(this.prev_start - start) > 10 || isGraphEdge) {\n      i = start;\n      this.prev_start = start;\n      while (i < end) {\n        commit = this.commits[i];\n        i += 1;\n        if (commit.hasDrawn !== true) {\n          x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n          y = this.offsetY + this.unitTime * commit.time;\n          this.drawDot(x, y, commit);\n          this.drawLines(x, y, commit);\n          this.appendLabel(x, y, commit);\n          this.appendAnchor(x, y, commit);\n          commit.hasDrawn = true;\n        }\n      }\n      return this.top.toFront();\n    }\n  };\n\n  BranchGraph.prototype.bindEvents = function() {\n    var element;\n    element = this.element;\n    return $(element).scroll((function(_this) {\n      return function(event) {\n        return _this.renderPartialGraph();\n      };\n    })(this));\n  };\n\n  BranchGraph.prototype.scrollDown = function() {\n    this.element.scrollTop(this.element.scrollTop() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollUp = function() {\n    this.element.scrollTop(this.element.scrollTop() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollLeft = function() {\n    this.element.scrollLeft(this.element.scrollLeft() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollRight = function() {\n    this.element.scrollLeft(this.element.scrollLeft() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollBottom = function() {\n    return this.element.scrollTop(this.element.find('svg').height());\n  };\n\n  BranchGraph.prototype.scrollTop = function() {\n    return this.element.scrollTop(0);\n  };\n\n  BranchGraph.prototype.appendLabel = function(x, y, commit) {\n    var label, r, rect, shortrefs, text, textbox, triangle;\n    if (!commit.refs) {\n      return;\n    }\n    r = this.r;\n    shortrefs = commit.refs;\n    // Truncate if longer than 15 chars\n    if (shortrefs.length > 17) {\n      shortrefs = shortrefs.substr(0, 15) + \"…\";\n    }\n    text = r.text(x + 4, y, shortrefs).attr({\n      \"text-anchor\": \"start\",\n      font: \"10px Monaco, monospace\",\n      fill: \"#FFF\",\n      title: commit.refs\n    });\n    textbox = text.getBBox();\n    // Create rectangle based on the size of the textbox\n    rect = r.rect(x, y - 7, textbox.width + 5, textbox.height + 5, 4).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    triangle = r.path([\"M\", x - 5, y, \"L\", x - 15, y - 4, \"L\", x - 15, y + 4, \"Z\"]).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    label = r.set(rect, text);\n    label.transform([\"t\", -rect.getBBox().width - 15, 0]);\n    // Set text to front\n    return text.toFront();\n  };\n\n  BranchGraph.prototype.appendAnchor = function(x, y, commit) {\n    var anchor, options, r, top;\n    r = this.r;\n    top = this.top;\n    options = this.options;\n    anchor = r.circle(x, y, 10).attr({\n      fill: \"#000\",\n      opacity: 0,\n      cursor: \"pointer\"\n    }).click(function() {\n      return window.open(options.commit_url.replace(\"%s\", commit.id), \"_blank\");\n    }).hover(function() {\n      this.tooltip = r.commitTooltip(x + 5, y, commit);\n      return top.push(this.tooltip.insertBefore(this));\n    }, function() {\n      return this.tooltip && this.tooltip.remove() && delete this.tooltip;\n    });\n    return top.push(anchor);\n  };\n\n  BranchGraph.prototype.drawDot = function(x, y, commit) {\n    var avatar_box_x, avatar_box_y, r;\n    r = this.r;\n    r.circle(x, y, 3).attr({\n      fill: this.colors[commit.space],\n      stroke: \"none\"\n    });\n    avatar_box_x = this.offsetX + this.unitSpace * this.mspace + 10;\n    avatar_box_y = y - 10;\n    r.rect(avatar_box_x, avatar_box_y, 20, 20).attr({\n      stroke: this.colors[commit.space],\n      \"stroke-width\": 2\n    });\n    r.image(commit.author.icon, avatar_box_x, avatar_box_y, 20, 20);\n    return r.text(this.offsetX + this.unitSpace * this.mspace + 35, y, commit.message.split(\"\\n\")[0]).attr({\n      \"text-anchor\": \"start\",\n      font: \"14px Monaco, monospace\"\n    });\n  };\n\n  BranchGraph.prototype.drawLines = function(x, y, commit) {\n    var arrow, color, i, j, len, offset, parent, parentCommit, parentX1, parentX2, parentY, r, ref, results, route;\n    r = this.r;\n    ref = commit.parents;\n    results = [];\n    for (i = j = 0, len = ref.length; j < len; i = (j += 1)) {\n      parent = ref[i];\n      parentCommit = this.preparedCommits[parent[0]];\n      parentY = this.offsetY + this.unitTime * parentCommit.time;\n      parentX1 = this.offsetX + this.unitSpace * (this.mspace - parentCommit.space);\n      parentX2 = this.offsetX + this.unitSpace * (this.mspace - parent[1]);\n      // Set line color\n      if (parentCommit.space <= commit.space) {\n        color = this.colors[commit.space];\n      } else {\n        color = this.colors[parentCommit.space];\n      }\n      // Build line shape\n      if (parent[1] === commit.space) {\n        offset = [0, 5];\n        arrow = \"l-2,5,4,0,-2,-5,0,5\";\n      } else if (parent[1] < commit.space) {\n        offset = [3, 3];\n        arrow = \"l5,0,-2,4,-3,-4,4,2\";\n      } else {\n        offset = [-3, 3];\n        arrow = \"l-5,0,2,4,3,-4,-4,2\";\n      }\n      // Start point\n      route = [\"M\", x + offset[0], y + offset[1]];\n      // Add arrow if not first parent\n      if (i > 0) {\n        route.push(arrow);\n      }\n      // Circumvent if overlap\n      if (commit.space !== parentCommit.space || commit.space !== parent[1]) {\n        route.push(\"L\", parentX2, y + 10, \"L\", parentX2, parentY - 5);\n      }\n      // End point\n      route.push(\"L\", parentX1, parentY);\n      results.push(r.path(route).attr({\n        stroke: color,\n        \"stroke-width\": 2\n      }));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.markCommit = function(commit) {\n    var r, x, y;\n    if (commit.id === this.options.commit_id) {\n      r = this.r;\n      x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n      y = this.offsetY + this.unitTime * commit.time;\n      r.path([\"M\", x + 5, y, \"L\", x + 15, y + 4, \"L\", x + 15, y - 4, \"Z\"]).attr({\n        fill: \"#000\",\n        \"fill-opacity\": .5,\n        stroke: \"none\"\n      });\n      // Displayed in the center\n      return this.element.scrollTop(y - this.graphHeight / 2);\n    }\n  };\n\n  return BranchGraph;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./network/branch_graph.js","// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raphael/raphael.js\n// module id = J1aa\n// module chunks = 13","import Raphael from 'raphael/raphael';\n\nRaphael.prototype.commitTooltip = function commitTooltip(x, y, commit) {\n  const boxWidth = 300;\n  const icon = this.image(gon.relative_url_root + commit.author.icon, x, y, 20, 20);\n  const nameText = this.text(x + 25, y + 10, commit.author.name);\n  const idText = this.text(x, y + 35, commit.id);\n  const messageText = this.text(x, y + 50, commit.message.replace(/\\r?\\n/g, ' \\n '));\n  const textSet = this.set(icon, nameText, idText, messageText).attr({\n    'text-anchor': 'start',\n    font: '12px Monaco, monospace',\n  });\n  nameText.attr({\n    font: '14px Arial',\n    'font-weight': 'bold',\n  });\n  idText.attr({\n    fill: '#AAA',\n  });\n  messageText.node.style['white-space'] = 'pre';\n  this.textWrap(messageText, boxWidth - 50);\n  const rect = this.rect(x - 10, y - 10, boxWidth, 100, 4).attr({\n    fill: '#FFF',\n    stroke: '#000',\n    'stroke-linecap': 'round',\n    'stroke-width': 2,\n  });\n  const tooltip = this.set(rect, textSet);\n  rect.attr({\n    height: tooltip.getBBox().height + 10,\n    width: tooltip.getBBox().width + 10,\n  });\n  tooltip.transform(['t', 20, 20]);\n  return tooltip;\n};\n\nRaphael.prototype.textWrap = function testWrap(t, width) {\n  const content = t.attr('text');\n  const abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  t.attr({\n    text: abc,\n  });\n  const letterWidth = t.getBBox().width / abc.length;\n  t.attr({\n    text: content,\n  });\n  const words = content.split(' ');\n  let x = 0;\n  const s = [];\n  for (let j = 0, len = words.length; j < len; j += 1) {\n    const word = words[j];\n    if (x + (word.length * letterWidth) > width) {\n      s.push('\\n');\n      x = 0;\n    }\n    if (word === '\\n') {\n      s.push('\\n');\n      x = 0;\n    } else {\n      s.push(`${word} `);\n      x += word.length * letterWidth;\n    }\n  }\n  t.attr({\n    text: s.join('').trim(),\n  });\n  const b = t.getBBox();\n  const h = Math.abs(b.y2) + 1;\n  return t.attr({\n    y: h,\n  });\n};\n\nexport default Raphael;\n\n\n\n// WEBPACK FOOTER //\n// ./network/raphael.js"],"sourceRoot":""}