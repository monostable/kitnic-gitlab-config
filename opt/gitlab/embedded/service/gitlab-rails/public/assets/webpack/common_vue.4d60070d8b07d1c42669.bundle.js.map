{"version":3,"sources":["webpack:///common_vue.4d60070d8b07d1c42669.bundle.js","webpack:///./vue_shared/components/table_pagination.js"],"names":["webpackJsonp","03o2","module","exports","__webpack_require__","window","Vue","gl","PAGINATION_UI_BUTTON_LIMIT","UI_LIMIT","SPREAD","PREV","NEXT","FIRST","LAST","VueGlPagination","extend","props","change","type","Function","required","pageInfo","Object","methods","changePage","e","text","target","innerText","_pageInfo","this","totalPages","nextPage","previousPage","computed","prev","next","getItems","total","page","items","push","title","disabled","separator","start","Math","max","end","min","i","isActive","active","last","template","2"],"mappings":"AAAAA,cAAc,GAAG,GAAG,KAEdC,OACA,SAAUC,EAAQC,EAASC,GCAjCC,OAAOC,IAAMF,EAAQ,QAErB,SAAEG,GACA,GAAMC,GAA6B,EAC7BC,EAAW,EACXC,EAAS,MACTC,EAAO,OACPC,EAAO,OACPC,EAAQ,WACRC,EAAO,SAEbP,GAAGQ,gBAAkBT,IAAIU,QACvBC,OAcEC,QACEC,KAAMC,SACNC,UAAU,GAoBZC,UACEH,KAAMI,OACNF,UAAU,IAGdG,SACEC,WADO,SACIC,GACT,GAAMC,GAAOD,EAAEE,OAAOC,UADVC,EAEmCC,KAAKT,SAA5CU,EAFIF,EAEJE,WAAYC,EAFRH,EAEQG,SAAUC,EAFlBJ,EAEkBI,YAE9B,QAAQP,GACN,IAAKjB,GACH,KACF,KAAKI,GACHiB,KAAKb,OAAOc,EACZ,MACF,KAAKpB,GACHmB,KAAKb,OAAOe,EACZ,MACF,KAAKtB,GACHoB,KAAKb,OAAOgB,EACZ,MACF,KAAKrB,GACHkB,KAAKb,OAAO,EACZ,MACF,SACEa,KAAKb,QAAQS,MAKrBQ,UACEC,KADQ,WAEN,MAAOL,MAAKT,SAASY,cAEvBG,KAJQ,WAKN,MAAON,MAAKT,SAASW,UAEvBK,SAPQ,WAQN,GAAMC,GAAQR,KAAKT,SAASU,WACtBQ,EAAOT,KAAKT,SAASkB,KACrBC,IAEFD,GAAO,GAAGC,EAAMC,MAAOC,MAAO9B,IAE9B2B,EAAO,EACTC,EAAMC,MAAOC,MAAOhC,EAAMyB,MAAM,IAEhCK,EAAMC,MAAOC,MAAOhC,EAAMiC,UAAU,EAAMR,MAAM,IAG9CI,EAAO/B,GAAUgC,EAAMC,MAAOC,MAAOjC,EAAQmC,WAAW,GAK5D,KAAK,GAHCC,GAAQC,KAAKC,IAAIR,EAAOhC,EAA4B,GACpDyC,EAAMF,KAAKG,IAAIV,EAAOhC,EAA4B+B,GAE/CY,EAAIL,EAAOK,GAAKF,EAAKE,IAAK,CACjC,GAAMC,GAAWD,IAAMX,CACvBC,GAAMC,MAAOC,MAAOQ,EAAGE,OAAQD,EAAUZ,MAAM,IAejD,MAZID,GAAQC,EAAOhC,GACjBiC,EAAMC,MAAOC,MAAOjC,EAAQmC,WAAW,EAAML,MAAM,IAGjDA,IAASD,EACXE,EAAMC,MAAOC,MAAO/B,EAAMgC,UAAU,EAAMP,MAAM,IACvCE,EAAQC,GAAQ,GACzBC,EAAMC,MAAOC,MAAO/B,EAAMyB,MAAM,IAG9BE,EAAQC,GAAQ,GAAGC,EAAMC,MAAOC,MAAO7B,EAAMwC,MAAM,IAEhDb,IAGXc,ogBAmBDlD,OAAOE,KAAOF,OAAOE,SDRlBiD,EACA,SAAUtD,EAAQC,EAASC,GAEjCA,EAAoB,QACpBF,EAAOC,QAAUC,EAAoB,WAKlC","file":"common_vue.4d60070d8b07d1c42669.bundle.js","sourcesContent":["webpackJsonp([18,25,26],{\n\n/***/ \"03o2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* global Vue, gl */\n/* eslint-disable no-param-reassign, no-plusplus */\n\nwindow.Vue = __webpack_require__(\"Eruj\");\n\n(function (gl) {\n  var PAGINATION_UI_BUTTON_LIMIT = 4;\n  var UI_LIMIT = 6;\n  var SPREAD = '...';\n  var PREV = 'Prev';\n  var NEXT = 'Next';\n  var FIRST = '<< First';\n  var LAST = 'Last >>';\n\n  gl.VueGlPagination = Vue.extend({\n    props: {\n\n      // TODO: Consider refactoring in light of turbolinks removal.\n\n      /**\n        This function will take the information given by the pagination component\n         Here is an example `change` method:\n         change(pagenum) {\n          gl.utils.visitUrl(`?page=${pagenum}`);\n        },\n      */\n\n      change: {\n        type: Function,\n        required: true\n      },\n\n      /**\n        pageInfo will come from the headers of the API call\n        in the `.then` clause of the VueResource API call\n        there should be a function that contructs the pageInfo for this component\n         This is an example:\n         const pageInfo = headers => ({\n          perPage: +headers['X-Per-Page'],\n          page: +headers['X-Page'],\n          total: +headers['X-Total'],\n          totalPages: +headers['X-Total-Pages'],\n          nextPage: +headers['X-Next-Page'],\n          previousPage: +headers['X-Prev-Page'],\n        });\n      */\n\n      pageInfo: {\n        type: Object,\n        required: true\n      }\n    },\n    methods: {\n      changePage: function changePage(e) {\n        var text = e.target.innerText;\n        var _pageInfo = this.pageInfo,\n            totalPages = _pageInfo.totalPages,\n            nextPage = _pageInfo.nextPage,\n            previousPage = _pageInfo.previousPage;\n\n\n        switch (text) {\n          case SPREAD:\n            break;\n          case LAST:\n            this.change(totalPages);\n            break;\n          case NEXT:\n            this.change(nextPage);\n            break;\n          case PREV:\n            this.change(previousPage);\n            break;\n          case FIRST:\n            this.change(1);\n            break;\n          default:\n            this.change(+text);\n            break;\n        }\n      }\n    },\n    computed: {\n      prev: function prev() {\n        return this.pageInfo.previousPage;\n      },\n      next: function next() {\n        return this.pageInfo.nextPage;\n      },\n      getItems: function getItems() {\n        var total = this.pageInfo.totalPages;\n        var page = this.pageInfo.page;\n        var items = [];\n\n        if (page > 1) items.push({ title: FIRST });\n\n        if (page > 1) {\n          items.push({ title: PREV, prev: true });\n        } else {\n          items.push({ title: PREV, disabled: true, prev: true });\n        }\n\n        if (page > UI_LIMIT) items.push({ title: SPREAD, separator: true });\n\n        var start = Math.max(page - PAGINATION_UI_BUTTON_LIMIT, 1);\n        var end = Math.min(page + PAGINATION_UI_BUTTON_LIMIT, total);\n\n        for (var i = start; i <= end; i++) {\n          var isActive = i === page;\n          items.push({ title: i, active: isActive, page: true });\n        }\n\n        if (total - page > PAGINATION_UI_BUTTON_LIMIT) {\n          items.push({ title: SPREAD, separator: true, page: true });\n        }\n\n        if (page === total) {\n          items.push({ title: NEXT, disabled: true, next: true });\n        } else if (total - page >= 1) {\n          items.push({ title: NEXT, next: true });\n        }\n\n        if (total - page >= 1) items.push({ title: LAST, last: true });\n\n        return items;\n      }\n    },\n    template: '\\n      <div class=\"gl-pagination\">\\n        <ul class=\"pagination clearfix\">\\n          <li v-for=\\'item in getItems\\'\\n            :class=\\'{\\n              page: item.page,\\n              prev: item.prev,\\n              next: item.next,\\n              separator: item.separator,\\n              active: item.active,\\n              disabled: item.disabled\\n            }\\'\\n          >\\n            <a @click=\"changePage($event)\">{{item.title}}</a>\\n          </li>\\n        </ul>\\n      </div>\\n    '\n  });\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ 2:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"Eruj\");\nmodule.exports = __webpack_require__(\"7UJR\");\n\n\n/***/ })\n\n},[2]);\n\n\n// WEBPACK FOOTER //\n// common_vue.4d60070d8b07d1c42669.bundle.js","/* global Vue, gl */\n/* eslint-disable no-param-reassign, no-plusplus */\n\nwindow.Vue = require('vue');\n\n((gl) => {\n  const PAGINATION_UI_BUTTON_LIMIT = 4;\n  const UI_LIMIT = 6;\n  const SPREAD = '...';\n  const PREV = 'Prev';\n  const NEXT = 'Next';\n  const FIRST = '<< First';\n  const LAST = 'Last >>';\n\n  gl.VueGlPagination = Vue.extend({\n    props: {\n\n      // TODO: Consider refactoring in light of turbolinks removal.\n\n      /**\n        This function will take the information given by the pagination component\n\n        Here is an example `change` method:\n\n        change(pagenum) {\n          gl.utils.visitUrl(`?page=${pagenum}`);\n        },\n      */\n\n      change: {\n        type: Function,\n        required: true,\n      },\n\n      /**\n        pageInfo will come from the headers of the API call\n        in the `.then` clause of the VueResource API call\n        there should be a function that contructs the pageInfo for this component\n\n        This is an example:\n\n        const pageInfo = headers => ({\n          perPage: +headers['X-Per-Page'],\n          page: +headers['X-Page'],\n          total: +headers['X-Total'],\n          totalPages: +headers['X-Total-Pages'],\n          nextPage: +headers['X-Next-Page'],\n          previousPage: +headers['X-Prev-Page'],\n        });\n      */\n\n      pageInfo: {\n        type: Object,\n        required: true,\n      },\n    },\n    methods: {\n      changePage(e) {\n        const text = e.target.innerText;\n        const { totalPages, nextPage, previousPage } = this.pageInfo;\n\n        switch (text) {\n          case SPREAD:\n            break;\n          case LAST:\n            this.change(totalPages);\n            break;\n          case NEXT:\n            this.change(nextPage);\n            break;\n          case PREV:\n            this.change(previousPage);\n            break;\n          case FIRST:\n            this.change(1);\n            break;\n          default:\n            this.change(+text);\n            break;\n        }\n      },\n    },\n    computed: {\n      prev() {\n        return this.pageInfo.previousPage;\n      },\n      next() {\n        return this.pageInfo.nextPage;\n      },\n      getItems() {\n        const total = this.pageInfo.totalPages;\n        const page = this.pageInfo.page;\n        const items = [];\n\n        if (page > 1) items.push({ title: FIRST });\n\n        if (page > 1) {\n          items.push({ title: PREV, prev: true });\n        } else {\n          items.push({ title: PREV, disabled: true, prev: true });\n        }\n\n        if (page > UI_LIMIT) items.push({ title: SPREAD, separator: true });\n\n        const start = Math.max(page - PAGINATION_UI_BUTTON_LIMIT, 1);\n        const end = Math.min(page + PAGINATION_UI_BUTTON_LIMIT, total);\n\n        for (let i = start; i <= end; i++) {\n          const isActive = i === page;\n          items.push({ title: i, active: isActive, page: true });\n        }\n\n        if (total - page > PAGINATION_UI_BUTTON_LIMIT) {\n          items.push({ title: SPREAD, separator: true, page: true });\n        }\n\n        if (page === total) {\n          items.push({ title: NEXT, disabled: true, next: true });\n        } else if (total - page >= 1) {\n          items.push({ title: NEXT, next: true });\n        }\n\n        if (total - page >= 1) items.push({ title: LAST, last: true });\n\n        return items;\n      },\n    },\n    template: `\n      <div class=\"gl-pagination\">\n        <ul class=\"pagination clearfix\">\n          <li v-for='item in getItems'\n            :class='{\n              page: item.page,\n              prev: item.prev,\n              next: item.next,\n              separator: item.separator,\n              active: item.active,\n              disabled: item.disabled\n            }'\n          >\n            <a @click=\"changePage($event)\">{{item.title}}</a>\n          </li>\n        </ul>\n      </div>\n    `,\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./vue_shared/components/table_pagination.js"],"sourceRoot":""}